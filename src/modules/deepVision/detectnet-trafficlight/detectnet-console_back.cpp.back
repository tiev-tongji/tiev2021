/*
 * Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <lcm/lcm-cpp.hpp>
#include "msg/structTRAFFICLIGHT.hpp"
#include "msg/structOBJECTLIST.hpp"
#include "msg/example_t.hpp"

#include "detectNet.h"
#include "loadImage.h"
#include <fstream>
#include <unistd.h>
#include "cudaMappedMemory.h"

#include <pylon/PylonIncludes.h>
#include <sys/time.h>
#include <time.h>

#include <iostream>

#include "trafficDirDetection.h"

using namespace Pylon;
using namespace cv;
using namespace std;

typedef struct trafficLightSignal{
	bool straight;
	bool left;
	bool right;
}trafficlightSignal;

//#define USBCamera
//const string InputVideo = "fowardright.mp4";
//#define DEBUG
//#define CUTIMAGE

const int DISTANCE = 20;
const string Name = "trafficLight";

uint64_t current_timestamp() {
    struct timeval te; 
    gettimeofday(&te, NULL); // get current time
    return te.tv_sec*1000LL + te.tv_usec/1000; // caculate milliseconds
}

inline string getCurrentTime()
{
  time_t timep;
  time (&timep);
  char tmp[64];
  strftime(tmp, sizeof(tmp), "%Y-%m-%d %H:%M:%S",localtime(&timep) );
  return tmp;
}

int nms(vector<boundingbox>& boundingboxs, vector<boundingbox>& output);
int trafficlightPosAnalysis(const vector<boundingbox>& boundingboxs, trafficlightSignal& signal);
int trafficlightFilter(trafficlightSignal& signal);
// Number of images to be grabbed.
static const uint32_t c_countOfImagesToGrab = 10000000;

// main entry point
int main( int argc, char** argv )
{
	string loggerName = Name + ".txt";
	ofstream Logger(loggerName.c_str());
	
	TraffirDir trafficDir;
	//lcm::LCM lcm("udpm://239.255.76.67:7667?ttl=1");
	
	lcm::LCM lcm;
    	if (!lcm.good()){
        	exit(-1);
	}


	Logger << getCurrentTime().c_str() << "System Start" << endl;

	printf("detectnet-console\n  args (%i):  ", argc);
	
	for( int i=0; i < argc; i++ )
		printf("%i [%s]  ", i, argv[i]);
		
	printf("\n\n");
	
	
	// retrieve filename argument
	if( argc < 2 )
	{
		printf("detectnet-console:   input image filename required\n");
		return 0;
	}
	
	const char* imgFilename = argv[1];
	

	// create detectNet
	detectNet* net = detectNet::Create(argc, argv);

	if( !net )
	{
		printf("detectnet-console:   failed to initialize detectNet\n");
		return 0;
	}

	net->EnableProfiler();
	
	// alloc memory for bounding box & confidence value output arrays
	const uint32_t maxBoxes = net->GetMaxBoundingBoxes();		printf("maximum bounding boxes:  %u\n", maxBoxes);
	const uint32_t classes  = net->GetNumClasses();
	
	float* bbCPU    = NULL;
	float* bbCUDA   = NULL;
	float* confCPU  = NULL;
	float* confCUDA = NULL;
	
	if( !cudaAllocMapped((void**)&bbCPU, (void**)&bbCUDA, maxBoxes * sizeof(float4)) ||
	    !cudaAllocMapped((void**)&confCPU, (void**)&confCUDA, maxBoxes * classes * sizeof(float)) )
	{
		printf("detectnet-console:  failed to alloc output memory\n");
		return 0;
	}
	
#ifdef USBCamera	
	VideoCapture cap(InputVideo.c_str()); // open the default camera
	if(!cap.isOpened()){  // check if we succeeded
        	cerr << "Read Video error" << endl;
		return -1;
    	}
#else

	cout << "Load Camera: " << (int)(atoi(argv[1])) << endl;
	PylonInitialize();
	
	CTlFactory& tlFactory = CTlFactory::GetInstance();
	DeviceInfoList_t devices;
        if ( tlFactory.EnumerateDevices(devices) == 0 )
        {
		cerr << "No Basler Camera" << endl;
        	Logger << getCurrentTime().c_str() << " Not connected with basler Camera"  << endl;
		exit(-1);
        }
	//CInstantCamera camera( CTlFactory::GetInstance().CreateFirstDevice());
	CInstantCamera camera( CTlFactory::GetInstance().CreateDevice(devices[(int)(atoi(argv[1]))]));

        // Print the model name of the camera.
        Logger << getCurrentTime().c_str() << " Using device " << camera.GetDeviceInfo().GetModelName() << endl;
        cout << getCurrentTime().c_str() << " Using device " << camera.GetDeviceInfo().GetModelName() << endl;
	sleep(5);

	camera.MaxNumBuffer = 5;
	// Start the grabbing of c_countOfImagesToGrab images.
        // The camera device is parameterized with a default configuration which
        //// sets up free-running continuous acquisition.
        camera.StartGrabbing( c_countOfImagesToGrab);

        //// This smart pointer will receive the grab result data.
        CGrabResultPtr ptrGrabResult;

        CImageFormatConverter fc;
        fc.OutputPixelFormat = PixelType_BGR8packed;
#endif

	Logger << getCurrentTime().c_str() << ", Video Start" << endl;	
	long long frameNum = 0;

#ifdef USBCamera
	while (1)
#else
	while ( camera.IsGrabbing())
#endif
        {
		//sleep(5);
		// load image from file on disk
		float* imgCPU    = NULL;
		float* imgCUDA   = NULL;
		int    imgWidth  = 0;
		int    imgHeight = 0;
		
		frameNum++;
		string ImageSavePath = Name + "/" + to_string(frameNum) + ".jpg";
#ifdef USBCamera
		Mat frame;
		cap >> frame;
		if (frame.empty()){
			cerr << "Video Finished" << endl;
			break;
		}
		//if(frameNum % 2 == 0){
		//	frame = imread("35.jpg");
		//}
		//else{
		//	frame = imread("31.jpg");
		//}
#else
		// Wait for an image and then retrieve it. A timeout of 5000 ms is used.
            	camera.RetrieveResult( 5000, ptrGrabResult, TimeoutHandling_ThrowException);
#endif
            	// Image grabbed successfully?
#ifdef USBCamera
		if( 1 )
#else
            	if (ptrGrabResult->GrabSucceeded())
#endif
            	{
#ifdef USBCamera
			cv::Mat cv_img = frame;
#else
            	    	// Access the image data.
            	    	cout << "SizeX: " << ptrGrabResult->GetWidth() << endl;
            	    	cout << "SizeY: " << ptrGrabResult->GetHeight() << endl;
            	    	const uint8_t *pImageBuffer = (uint8_t *) ptrGrabResult->GetBuffer();
            	    	cout << "Gray value of first pixel: " << (uint32_t) pImageBuffer[0] << endl << endl;

            	    	CPylonImage image;
            	    	fc.Convert(image, ptrGrabResult);
            	    	cv::Mat cv_img = cv::Mat(ptrGrabResult->GetHeight(), ptrGrabResult->GetWidth(), CV_8UC3,(uint8_t*)image.GetBuffer());
            	    	//cv::imwrite("balserImage.jpg", cv_img);
#endif
			
			Rect rect(240, 1, 800, 299);
			Mat cutImg = cv_img(rect);
			cv::flip(cutImg, cutImg, -1);
			
			//imshow("Image Show", cutImg);
			//waitKey(1);
			if( !loadImageRGBAMat(cutImg, (float4**)&imgCPU, (float4**)&imgCUDA, &imgWidth, &imgHeight) )
			{
				Logger << getCurrentTime().c_str() << ", failed to load image";
				return 0;
			}
			// classify image
			int numBoundingBoxes = maxBoxes;
		
			vector<boundingbox> boundingboxs;
			vector<boundingbox> filterBoundingBoxs;	
			printf("detectnet-console:  beginning processing network (%zu)\n", current_timestamp());
			clock_t startTime = clock();
			const bool result = net->Detect(imgCUDA, imgWidth, imgHeight, bbCPU, &numBoundingBoxes, confCPU);
			clock_t endTime = clock();
			Logger << getCurrentTime().c_str() << ", Net Time: "  << (double)(endTime - startTime)/CLOCKS_PER_SEC << endl;
			//printf("Net Time: %lf\n", (double)(endTime - startTime)/CLOCKS_PER_SEC);

			printf("detectnet-console:  finished processing network  (%zu)\n", current_timestamp());

			if( !result )
				Logger << getCurrentTime().c_str() << ", detectnet-console:  failed to classify";
			else    // if the user supplied an output filename
			{
				Logger << getCurrentTime().c_str() << ", " << numBoundingBoxes <<  " bounding boxes detected" << endl;
				
				int lastClass = 0;
				int lastStart = 0;
				
				cv::Mat Matimage;
                                QImgRGBAToMat(Matimage, (float4*)imgCPU, imgWidth, imgHeight, 255.0f);

				for( int n=0; n < numBoundingBoxes; n++ )
				{
					int nc = confCPU[n*2+1];
					float* bb = bbCPU + (n * 4);
					float ncoverage = confCPU[n * 2 + 0];
				
					printf("bounding box %i   (%f, %f)  (%f, %f)  w=%f  h=%f\n", n, bb[0], bb[1], bb[2], bb[3], bb[2] - bb[0], bb[3] - bb[1]); 
					
					if(bb[0] < 0){
						bb[0] = 0;
					}
					if(bb[2] >= 800){
						bb[2] = 799;
					}
					if(bb[1] < 0){
						bb[1] = 0;
					}
					if(bb[3] >= 299){
						bb[3] = 298;
					}

					if(bb[2] - bb[0] <= 0){
						continue;
					}
					if(bb[3] - bb[1] <= 0){
						continue;
					}
					//printf("Start to cut image\n");
				
					//printf("W: %f\n", bb[2] - bb[0]);	
					//printf("H: %f\n", bb[3] - bb[1]);	
					//printf("Img Width: %d\n", Matimage.cols);	
					//printf("Img Height: %d\n", Matimage.rows);
	
					cv::Rect rect(bb[0], bb[1], bb[2]-bb[0], bb[3]-bb[1]);
                                        cv::Mat cutImage = Mat(Matimage, rect).clone();
					//int trafficType = trafficDir.JudgeLightType(cutImage, nc);
#ifdef DEBUG	
				
					Logger << "Bounding Box[" << n << "]: " << bb[0] << ", " << bb[1] << ", " << bb[2] << ", " << bb[3] << ", class: " << nc << ", coverage: " << ncoverage << endl;
#endif
					boundingbox bbox;
					bbox.xmin = bb[0];
					bbox.ymin = bb[1];
					bbox.xmax = bb[2];
					bbox.ymax = bb[3];
					bbox.classes = nc;
					bbox.score = ncoverage;
					bbox.isCircle = trafficDir.isCircle(cutImage);
					boundingboxs.push_back(bbox);
#ifdef DEBUG
					net->DrawBoxes(imgCUDA, imgCUDA, imgWidth, imgHeight, bbCUDA + (n * 4), 1, nc);
#endif
#ifdef CUTIMAGE
					vector<boundingbox> singleBoundingBox;
					singleBoundingBox.push_back(bbox);
					string ImagePath = Name + "Cut" + "/" + InputVideo.c_str() + "_" + to_string(bbox.isCircle) + "_" + to_string(frameNum) + "_" + to_string(n) + "_" + to_string(ncoverage) + ".jpg"; 
					//saveBoundingBoxRGBA(ImagePath, (float4*)imgCPU, imgWidth, imgHeight, 255.0f, boundingboxs);
					imwrite(ImagePath.c_str(), cutImage);
					cout << "Cut Image Save successfully" << endl;
#endif
#ifdef DEBUG				
					if( !saveImageRGBA(ImageSavePath.c_str(), (float4*)imgCPU, imgWidth, imgHeight, 255.0f) )
						cerr << "detectnet-console:  failed saving image" << endl; 
					else{	
						Logger << getCurrentTime().c_str() << ", detectnet-console:  successfully wrote image to " << ImageSavePath.c_str() << endl;
				
					}
#endif
				}

				cout << "Start to analysis traffic Light" << endl;
				int res = nms(boundingboxs, filterBoundingBoxs);

				trafficlightSignal signal;
				res = trafficlightPosAnalysis(boundingboxs, signal);
				res = trafficlightFilter(signal);
				Logger << getCurrentTime().c_str() << "Left << " << signal.left << " ^^ " << signal.straight << " ^^  " << signal.right << ">>right" << endl;
				structTRAFFICLIGHT trafficlightMsg;

				trafficlightMsg.turn_signal = signal.right;
				trafficlightMsg.turn_signal = (trafficlightMsg.turn_signal << 1) | signal.straight;
				trafficlightMsg.turn_signal = (trafficlightMsg.turn_signal << 1) | signal.left;
			
				Logger << getCurrentTime().c_str() << "Turn Signal: " <<(int)((char)(trafficlightMsg.turn_signal)) << endl;		
				lcm.publish("TRAFFICLIGHT", &trafficlightMsg);
				CUDA(cudaThreadSynchronize());
				if(frameNum % 25 == 0){
					
					if( !saveImageRGBA(ImageSavePath.c_str(), (float4*)imgCPU, imgWidth, imgHeight, 255.0f) )
						cerr << "detectnet-console:  failed saving image" << endl; 
					else{	
						Logger << getCurrentTime().c_str() << ", Time Out, detectnet-console:  successfully wrote image to " << ImageSavePath.c_str() << endl;
				
					}
				}
			}
		}
		CUDA(cudaFreeHost(imgCPU));
	}
	
	printf("\nshutting down...\n");
	//CUDA(cudaFreeHost(imgCPU));
	delete net;
	return 0;
}

int nms(vector<boundingbox>& boundingboxs, vector<boundingbox>& output){
	printf("Input BoundingBox Size: %d\n", boundingboxs.size());
	if( 1 == boundingboxs.size() ){
		output.push_back(boundingboxs[0]);
		printf("Output BoundingBox Size: %d\n", output.size());
		return 0;
	}
	for(int i = 0; i < boundingboxs.size(); i++){
		for(int j = i+1; j < boundingboxs.size(); j++){
			int bb1 = boundingboxs[i].xmin + boundingboxs[i].xmax;	
			int bb2 = boundingboxs[j].xmin + boundingboxs[j].xmax;
			if(abs(bb1 - bb2) < DISTANCE){
				if(boundingboxs[i].score > boundingboxs[j].score){
					output.push_back(boundingboxs[i]);
					printf("bb %d(%d, %d, %f) Compare With bb %d(%d, %d, %f)\n", i, boundingboxs[i].xmin, boundingboxs[i].xmax, boundingboxs[i].score, j, boundingboxs[j].xmin, boundingboxs[j].xmax, boundingboxs[j].score);
				}
			}
			else{
				output.push_back(boundingboxs[j]);
			}
		}
	}
	printf("Output BoundingBox Size: %d\n", output.size());
	return 0;
}



int trafficlightPosAnalysis(const vector<boundingbox>& boundingboxs, trafficlightSignal& signal){
	if( 1 == boundingboxs.size() ){
		signal.straight = boundingboxs[0].classes;
		signal.left = boundingboxs[0].classes;
		signal.right = 1;//boundingboxs[0].classes;
	}
	else if( 2 == boundingboxs.size()){
		if(boundingboxs[0].xmin < boundingboxs[1].xmin){
			signal.left = boundingboxs[0].classes;
			signal.straight = boundingboxs[1].classes;
			signal.right = boundingboxs[1].classes;
			//if(boundingboxs[1].isCircle){
			//	signal.right = 1;
			//}
			//else{
			//	signal.right = boundingboxs[1].classes;
			//}
		}
		else{
			signal.left = boundingboxs[1].classes;
			signal.straight = boundingboxs[0].classes;
			signal.right = boundingboxs[0].classes;
			//if(boundingboxs[1].isCircle){
			//	signal.right = 1;
			//}
			//else{
			//	signal.right = boundingboxs[0].classes;
			//}
		}
	}
	else if(3 == boundingboxs.size()){
		printf("Waitting for update\n");
	}
	else if( 0 == boundingboxs.size()){
		signal.left = 1; //boundingboxs[1].classes;
		signal.straight = 1; //boundingboxs[0].classes;
		signal.right = 1; //boundingboxs[0].classes;
		
	}
	else{
		cerr << "Not Support Now" << endl;
		return -1;
	}
	return 0;
}

const int LimitCountNum = 20;	// 10hz, 2s
trafficlightSignal lastSignal={1,1,1};
int countLeft = 0;
int countRight = 0;
int countStraight = 0;

int trafficlightFilter(trafficlightSignal& signal){

	if(signal.left == 0){
		countLeft = LimitCountNum;
	}
	else if(lastSignal.left == 0){
		countLeft--;
		signal.left = 0;
		if(countLeft == 0){
			signal.left = 1;
		}
	}

	if(signal.right == 0){
		countRight = LimitCountNum;
	}
	else if(lastSignal.right == 0){
		countRight--;
		signal.right = 0;
		if(countRight == 0){
			signal.right = 1;
		}
	}

	if(signal.straight == 0){
		countStraight = LimitCountNum;
	}
	else if(lastSignal.straight == 0){
		countStraight--;
		signal.straight = 0;
		if(countStraight == 0){
			signal.straight = 1;
		}
	}


	lastSignal.left = signal.left;
	lastSignal.right = signal.right;
	lastSignal.straight = signal.straight;
}
