/** THIS IS AN AUTOMATICALLY GENERATED FILE.
 *  DO NOT MODIFY BY HAND!!
 *
 *  Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __visVISUALIZATION_hpp__
#define __visVISUALIZATION_hpp__

#include <vector>
#include "visLaneLine.hpp"
#include "visMapPoint.hpp"
#include "visPoint.hpp"
#include "visPoint.hpp"
#include "visPoint.hpp"
#include "visPath.hpp"
#include "visSTBoundary.hpp"
#include "visSTPoint.hpp"
#include "visCoefficient.hpp"
#include "visSpline2.hpp"
#include "visText.hpp"


class visVISUALIZATION
{
    public:
        double     safe_map[501][251];

        uint8_t    used_map[501][251];

        int32_t    lanes_size;

        std::vector< visLaneLine > lanes;

        int32_t    reference_path_size;

        std::vector< visMapPoint > reference_path;

        int32_t    best_path_size;

        std::vector< visPoint > best_path;

        int32_t    targets_size;

        std::vector< visPoint > targets;

        visPoint   start_point;

        int32_t    paths_size;

        std::vector< visPath > paths;

        int32_t    st_boundaries_size;

        std::vector< visSTBoundary > st_boundaries;

        int32_t    dp_speed_size;

        std::vector< visSTPoint > dp_speed;

        int8_t     qp_or_splines;

        int32_t    qp_speed_curve_size;

        std::vector< visCoefficient > qp_speed_curve;

        int32_t    splines_speed_curve_size;

        std::vector< visSpline2 > splines_speed_curve;

        int32_t    text_info_size;

        std::vector< visText > text_info;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~visVISUALIZATION() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "visVISUALIZATION"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int visVISUALIZATION::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int visVISUALIZATION::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t visVISUALIZATION::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t visVISUALIZATION::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* visVISUALIZATION::getTypeName()
{
    return "visVISUALIZATION";
}

int visVISUALIZATION::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    for (int a0 = 0; a0 < 501; ++a0) {
        thislen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->safe_map[a0][0], 251);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    for (int a0 = 0; a0 < 501; ++a0) {
        thislen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->used_map[a0][0], 251);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->lanes_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->lanes_size; ++a0) {
        thislen = this->lanes[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->reference_path_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->reference_path_size; ++a0) {
        thislen = this->reference_path[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->best_path_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->best_path_size; ++a0) {
        thislen = this->best_path[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->targets_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->targets_size; ++a0) {
        thislen = this->targets[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = this->start_point._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->paths_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->paths_size; ++a0) {
        thislen = this->paths[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->st_boundaries_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->st_boundaries_size; ++a0) {
        thislen = this->st_boundaries[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->dp_speed_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->dp_speed_size; ++a0) {
        thislen = this->dp_speed[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->qp_or_splines, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->qp_speed_curve_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->qp_speed_curve_size; ++a0) {
        thislen = this->qp_speed_curve[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->splines_speed_curve_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->splines_speed_curve_size; ++a0) {
        thislen = this->splines_speed_curve[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->text_info_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->text_info_size; ++a0) {
        thislen = this->text_info[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

int visVISUALIZATION::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    for (int a0 = 0; a0 < 501; ++a0) {
        thislen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->safe_map[a0][0], 251);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    for (int a0 = 0; a0 < 501; ++a0) {
        thislen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->used_map[a0][0], 251);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->lanes_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->lanes.resize(this->lanes_size);
    for (int a0 = 0; a0 < this->lanes_size; ++a0) {
        thislen = this->lanes[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->reference_path_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->reference_path.resize(this->reference_path_size);
    for (int a0 = 0; a0 < this->reference_path_size; ++a0) {
        thislen = this->reference_path[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->best_path_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->best_path.resize(this->best_path_size);
    for (int a0 = 0; a0 < this->best_path_size; ++a0) {
        thislen = this->best_path[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->targets_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->targets.resize(this->targets_size);
    for (int a0 = 0; a0 < this->targets_size; ++a0) {
        thislen = this->targets[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = this->start_point._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->paths_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->paths.resize(this->paths_size);
    for (int a0 = 0; a0 < this->paths_size; ++a0) {
        thislen = this->paths[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->st_boundaries_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->st_boundaries.resize(this->st_boundaries_size);
    for (int a0 = 0; a0 < this->st_boundaries_size; ++a0) {
        thislen = this->st_boundaries[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->dp_speed_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->dp_speed.resize(this->dp_speed_size);
    for (int a0 = 0; a0 < this->dp_speed_size; ++a0) {
        thislen = this->dp_speed[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->qp_or_splines, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->qp_speed_curve_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->qp_speed_curve.resize(this->qp_speed_curve_size);
    for (int a0 = 0; a0 < this->qp_speed_curve_size; ++a0) {
        thislen = this->qp_speed_curve[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->splines_speed_curve_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->splines_speed_curve.resize(this->splines_speed_curve_size);
    for (int a0 = 0; a0 < this->splines_speed_curve_size; ++a0) {
        thislen = this->splines_speed_curve[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->text_info_size, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->text_info.resize(this->text_info_size);
    for (int a0 = 0; a0 < this->text_info_size; ++a0) {
        thislen = this->text_info[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

uint32_t visVISUALIZATION::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += 501 * __double_encoded_array_size(NULL, 251);
    enc_size += 501 * __byte_encoded_array_size(NULL, 251);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->lanes_size; ++a0) {
        enc_size += this->lanes[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->reference_path_size; ++a0) {
        enc_size += this->reference_path[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->best_path_size; ++a0) {
        enc_size += this->best_path[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->targets_size; ++a0) {
        enc_size += this->targets[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->start_point._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->paths_size; ++a0) {
        enc_size += this->paths[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->st_boundaries_size; ++a0) {
        enc_size += this->st_boundaries[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->dp_speed_size; ++a0) {
        enc_size += this->dp_speed[a0]._getEncodedSizeNoHash();
    }
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->qp_speed_curve_size; ++a0) {
        enc_size += this->qp_speed_curve[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->splines_speed_curve_size; ++a0) {
        enc_size += this->splines_speed_curve[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->text_info_size; ++a0) {
        enc_size += this->text_info[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t visVISUALIZATION::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == visVISUALIZATION::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)visVISUALIZATION::getHash };

    uint64_t hash = (uint64_t)0x58ec7b43b2e6c934LL +
         visLaneLine::_computeHash(&cp) +
         visMapPoint::_computeHash(&cp) +
         visPoint::_computeHash(&cp) +
         visPoint::_computeHash(&cp) +
         visPoint::_computeHash(&cp) +
         visPath::_computeHash(&cp) +
         visSTBoundary::_computeHash(&cp) +
         visSTPoint::_computeHash(&cp) +
         visCoefficient::_computeHash(&cp) +
         visSpline2::_computeHash(&cp) +
         visText::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
