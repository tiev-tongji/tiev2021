syntax = "proto3";
option java_multiple_files = true;
option java_package = "cn.seisys.v2x.protocol";
package cn.seisys.v2x.pb;

enum Message_Type {
    UKNOWN_MSG = 0;
    OBJECT_MSG = 1;
    EVENT_MSG = 2;
    OBSTACLE_MSG = 3;
    STATUS_MSG = 4;
    RTE_MSG = 5;
    RTS_MSG = 6;
    SPAT_MSG = 7;
    MAP_MSG = 8;
    VIR_MSG = 9;
    RSC_MSG = 10;
    CAM_MSG = 11;
    DENM_MSG = 12;
    VSM_MSG = 13;
}

//数据来源  
enum DataSource{
    DATA_SOURCE_UNKNOWN = 0; // 未知数据源类型;
    SELFINFO = 1; // RSU 自身信息;
    V2X = 2; // 来源于参与者自身的V2X广播消息;
    VIDEO = 3; // 来源于视频传感器;
    MICROWAVE_RADAR = 4; // 来源于微波雷达传感器;
    LOOP = 5; // 来源于地磁线圈传感器;
    LIDAR = 6; // 来源于激光雷达传感器;
    INTEGRATED = 7; // 2 类或以上感知数据的融合结果;
    DATA_SOURCE_RESERVE = 8; // 保留
    CLOUD_FORWARDING = 9;    //云端转发
    MEC_TO_MEC = 10; //路侧自动转发
    CLOUD_TO_CLOUD = 11; //云端自动转发
    CLOUD_MANUAL = 12; //云端人工下发
}

//时间精度      
enum TimeConfidence{
    UNAVAILABLE = 0; // 未配备或不可用
    TIME_100_000 = 1; // 优于100 SECONDS
    TIME_050_000 = 2; // 优于50 SECONDS
    TIME_020_000 = 3; // 优于20 SECONDS
    TIME_010_000 = 4; // 优于10 SECONDS
    TIME_002_000 = 5; // 优于2 SECONDS
    TIME_001_000 = 6; // 优于1 SECOND
    TIME_000_500 = 7; // 优于0.5 SECONDS
    TIME_000_200 = 8; // 优于0.2 SECONDS
    TIME_000_100 = 9; // 优于0.1 SECONDS
    TIME_000_050 = 10; // 优于0.05 SECONDS
    TIME_000_020 = 11; // 优于0.02 SECONDS
    TIME_000_010 = 12; // 优于0.01 SECONDS
    TIME_000_005 = 13; // 优于0.005 SECONDS
    TIME_000_002 = 14; // 优于0.002 SECONDS
    TIME_000_001 = 15; // 优于0.001 SECONDS
    TIME_000_000_5 = 16; // 优于0.000,5 SECONDS
    TIME_000_000_2 = 17; // 优于0.000,2 SECONDS
    TIME_000_000_1 = 18; //优于0.000,1 SECONDS
    TIME_000_000_05 = 19; //优于0.000,05 SECONDS
    TIME_000_000_02 = 20; // 优于0.000,02 SECONDS
    TIME_000_000_01 = 21; // 优于0.000,01 SECONDS
    TIME_000_000_005 = 22; // 优于0.000,005 SECONDS
    TIME_000_000_002 = 23; // 优于0.000,002 SECONDS
    TIME_000_000_001 = 24; // 优于0.000,001 SECONDS
    TIME_000_000_000_5 = 25; // 优于0.000,000,5 SECONDS
    TIME_000_000_000_2 = 26; // 优于0.000,000,2 SECONDS
    TIME_000_000_000_1 = 27; // 优于0.000,000,1 SECONDS
    TIME_000_000_000_05 = 28; // 优于0.000,000,05 SECONDS
    TIME_000_000_000_02 = 29; // 优于0.000,000,02 SECONDS
    TIME_000_000_000_01 = 30; //优于0.000,000,01 SECONDS
    TIME_000_000_000_005 = 31; // 优于0.000,000,005 SECONDS
    TIME_000_000_000_002 = 32; // 优于0.000,000,002 SECONDS
    TIME_000_000_000_001 = 33; // 优于0.000,000,001 SECONDS
    TIME_000_000_000_000_5 = 34; // 优于0.000,000,000,5 SECONDS
    TIME_000_000_000_000_2 = 35; //优于0.000,000,000,2 SECONDS
    TIME_000_000_000_000_1 = 36; // 优于0.000,000,000,1 SECONDS
    TIME_000_000_000_000_05 = 37; // 优于0.000,000,000,05 SECONDS
    TIME_000_000_000_000_02 = 38; // 优于0.000,000,000,02 SECONDS
    TIME_000_000_000_000_01 = 39; // 优于0.000,000,000,01 SECONDS
}

//位置   
message Position3D{
    int32 lat = 1;  //定义纬度数值，北纬为正，南纬为负。取值范围_900000000到900000001，分辨率1e_7°，数值900000001 表示未知或无效。
    int32 lon = 2;  //定义经度数值。东经为正，西经为负。分辨率为1e_7°， 取值范围_1799999999到1800000001，数值1800000001表示未知或无效。
    int32 ele = 3;  //定义车辆海拔高程。分辨率为0.1米，取值范围_4096到61439，数值_4096表示无效数值。
}

//位置精度  
message PositionConfidenceSet{
    enum PositionConfidence{
        UNAVAILABLE_POS_CONFID = 0; // 不可用,  B0000 未配备或不可用
        POS_CONFID_500M = 1; // 大约 5*10^_3度
        POS_CONFID_200M = 2; // 大约 2*10^_3度
        POS_CONFID_100M = 3; // 大约 1*10^_3度
        POS_CONFID_50M = 4; // 大约 5*10^_4度
        POS_CONFID_20M = 5; // 大约 2*10^_4度
        POS_CONFID_10M = 6; // 约1*10^_4度
        POS_CONFID_5M = 7; // 大约 5*10^_5度
        POS_CONFID_2M = 8; // 大约 2*105度
        POS_CONFID_1M = 9; // 大约 1*10^_5度
        POS_CONFID_50CM = 10; // 大约 5*10^_6度
        POS_CONFID_20CM = 11; // 大约 2*10^_6度
        POS_CONFID_10CM = 12; // 大约 1*10^_6度
        POS_CONFID_5CM = 13; // 大约 5*10^_7度
        POS_CONFID_2CM = 14; // 大约 2*10^_7 度
        POS_CONFID_1CM = 15; // 大约 1*10^_7度
    };
    // 纵向坐标精度  数值描述了95%置信水平的车辆高程精度，该精度理论上只考虑了当前高程传感器的误差，但是，当系统能够自动检测错误并修正，相应的精度数值也应该提高。
    enum ElevationConfidence{
        UNAVAILABLE_ELE_CONFID = 0; // 未配备或不可用
        ELE_CONFID_500M = 1; //500米
        ELE_CONFID_200M = 2; //200米
        ELE_CONFID_100M = 3; //100米
        ELE_CONFID_50M = 4; //50米
        ELE_CONFID_20M = 5; //20米
        ELE_CONFID_10M = 6; //10米
        ELE_CONFID_5M = 7; //5米
        ELE_CONFID_2M = 8; //2米
        ELE_CONFID_1M = 9; //1米
        ELE_CONFID_50CM = 10; //50厘米
        ELE_CONFID_20CM = 11; //20厘米
        ELE_CONFID_10CM = 12; //10厘米
        ELE_CONFID_5CM = 13; //5厘米
        ELE_CONFID_2CM = 14; //2厘米
        ELE_CONFID_1CM = 15; //1厘米
    };
    PositionConfidence posConfid = 1; // 可选，平面坐标精度
    ElevationConfidence eleConfid = 2; // 可选，纵向坐标精度
}

//物体类型 
enum ParticipantType {
    PARTICIPANTTYPE_UNKNOWN = 0; //未知
    PARTICIPANTTYPE_MOTOR = 1;   //机动车
    PARTICIPANTTYPE_NON_MOTOR = 2;   //非机动车
    PARTICIPANTTYPE_PEDESTRIAN = 3;  //行人
    PARTICIPANTTYPE_RSU = 4;     //自身
}

//物体尺寸  
message ParticipantSize{
    uint32 width = 1; // 宽度。分辨率为1cm。
    uint32 length = 2; // 长度。分辨率为1cm。
    uint32 height = 3; // 可选，高度。分辨率为5cm。
}

// 物体尺寸精度 
message ParticipantSizeConfidence{
    enum SizeValueConfidence{
        SIZE_CONFID_UNAVAILABLE=0;
        SIZE_CONFID_100_00=1; // (100 M)
        SIZE_CONFID_050_00=2; // (50 M)
        SIZE_CONFID_020_00=3; // (20 M)
        SIZE_CONFID_010_00=4; // (10 M)
        SIZE_CONFID_005_00=5; // (5 M)
        SIZE_CONFID_002_00=6; // (2 M)
        SIZE_CONFID_001_00=7; // (1 M)
        SIZE_CONFID_000_50=8; // (50 CM)
        SIZE_CONFID_000_20=9; // (20 CM)
        SIZE_CONFID_000_10=10; // (10 CM)
        SIZE_CONFID_000_05=11; // (5 CM)
        SIZE_CONFID_000_02=12; // (2 CM)
        SIZE_CONFID_000_01=13; //(1 CM)
    };
    SizeValueConfidence widthConfid = 1; // 物体宽度置信度。
    SizeValueConfidence lengthConfid = 2; // 物体长度置信度。取值同上。
    SizeValueConfidence heightConfid = 3; // 可选，物体高度置信度。取值同上。
}

//影响区域点集合  
message Polygon{
    repeated Position3D pos = 1; //一组三维相对位置的定点组成的多边形区域，至少有4个点，至多32个点
}

//交通流感知区间  
message DetectorArea{
    int32 areaId = 1; //交通流感知区间ID
    int64 setTime = 2; //可选，UNIXTIME 时间戳 单位到秒 设置更新时间
    Polygon polygon = 3; //一组三维相对位置的定点组成的多边形区域，至少有4个点
    NodeReferenceId nodeId = 4; //本路口id，与TrafficFlow中nodeId相同
    int32 laneId = 5; //可选，LaneId道对象定义车道，定义来自Lane对象，[1,255]
}

//速度
enum SpeedConfidence{
    SPEED_CONFID_UNAVAILABLE = 0; // __未配备或不可用
    SPEED_CONFID_100MS = 1; // __100 METERS/SEC
    SPEED_CONFID_10MS = 2;  // __10 METERS/SEE
    SPEED_CONFID_5MS = 3; // __5 METERS/SEC
    SPEED_CONFID_1MS = 4; // __1 METERS/SEC
    SPEED_CONFID_0_1MS = 5;  // __ 0.1 METERS/SEC
    SPEED_CONFID_0_05MS = 6; // __0.05 METERS/SEC
    SPEED_CONFID_0_01MS = 7;  // __0.01 METERS/SEC
}

//加速度   
message AccelerationSet4Way{
    int32 lat = 1; // 可选，定义车辆纵向加速度。分辨率为0.01m/s^2，向前加速为正，反向为负。
    int32 lon = 2; // 可选，定义车辆横向加速度。分辨率为0.01m/s^2，向前加速为正，反向为负。
    int32 vert = 3; // 可选，分辨率为0.02g，g为重力加速度典型值 9.80665m/s2。沿重力方向向下为正，反向为负
    int32 yaw = 4; // 可选，车辆摆角速度，辨率单位为0.01°/s。顺时针旋转为正，反向为负
}

//加速度精度 
message AccelerationConfidence{
    enum AccConfidence {
        ACC_CONFID_UNAVAILABLE = 0; // Not Equipped or unavailable
        ACC_CONFID_PREC100DE = 1; // 100 m/s2
        ACC_CONFID_PREC10DEG = 2; // 10 m/s2
        ACC_CONFID_PREC5DEG = 3; // 5 m/s2
        ACC_CONFID_PREC1DEG = 4; // 1 m/s2
        ACC_CONFID_PREC0_1DEG = 5; // 0.1 m/s2
        ACC_CONFID_PREC0_05DEG = 6; // 0.05 m/s2
        ACC_CONFID_PREC0_01DEG = 7; //  0.01m/s2
    };
    AccConfidence  lonAccelConfid = 1; // 定义车辆横向加速度精度。
    AccConfidence  latAccelConfid = 2; // 定义车辆纵向加速度精度。取值同上
    AccConfidence  verticalAccelConfid = 3; // 定义Z轴方向的加速度精度。取值同上
    enum AngularVConfidence{
        ANGULARV_CONFID_UNAVAILABLE = 0;//NOT EQUIPPED OR UNAVAILABLE
        ANGULARV_CONFID_PREC100DEG = 1;//100 DEGREE/SEC
        ANGULARV_CONFID_PREC10DEG = 2;//10 DEGREE/SEC
        ANGULARV_CONFID_PREC5DEG = 3;//5 DEGREE/SEC
        ANGULARV_CONFID_PREC1DEG = 4;//1 DEGREE/SEC
        ANGULARV_CONFID_PREC0_1DEG = 5;// 0.1 DEGREE/SEC
        ANGULARV_CONFID_PREC0_05DEG = 6;// 0.05 DEGREE/SEC
        ANGULARV_CONFID_PREC0_01DEG = 7;// 0.01 DEGREE/SEC
    };
    AngularVConfidence yawRateConfid = 4; // 车辆摆角速度精度
}

//方向  
enum HeadingConfidence{
    HEADING_CONFID_UNAVAILABLE= 0;
    HEADING_CONFID_PREC10DEG= 1;
    HEADING_CONFIDE_PREC05DEG= 2;
    HEADING_CONFIDE_PREC01DEG= 3;
    HEADING_CONFID_PREC_1DEG= 4;
    HEADING_CONFID_PREC0_05DEG= 5;
    HEADING_CONFID_PREC0_01DEG= 6;
    HEADING_CONFID_PREC0_0125DEG= 7;
}

//车辆运动运动状态精度  
message MotionConfidenceSet{
    // enum SpeedConfidence{
    //     SPEED_CONFID_UNAVAILABLE = 0; // 未配备或不可用
    //     SPEED_CONFID_100MS = 1; // 100 METERS/SEC
    //     SPEED_CONFID_10MS = 2;  // 10 METERS/SEE
    //     SPEED_CONFID_5MS = 3; // 5 METERS/SEC
    //     SPEED_CONFID_1MS = 4; // 1 METERS/SEC
    //     SPEED_CONFID_0_1MS = 5;  // 0.1 METERS/SEC
    //     SPEED_CONFID_0_05MS = 6; // 0.05 METERS/SEC
    //     SPEED_CONFID_0_01MS = 7;  // 0.01 METERS/SEC
    // };
    SpeedConfidence speedCfd = 1;   //可选，车速精度
    // enum HeadingConfidence{
    //     HEADING_CONFID_UNAVAILABLE= 0;
    //     HEADING_CONFID_PREC10DEG= 1;
    //     HEADING_CONFIDE_PREC05DEG= 2;
    //     HEADING_CONFIDE_PREC01DEG= 3;
    //     HEADING_CONFID_PREC_1DEG= 4;
    //     HEADING_CONFID_PREC0_05DEG= 5;
    //     HEADING_CONFID_PREC0_01DEG= 6;
    //     HEADING_CONFID_PREC0_0125DEG= 7;
    // };
    HeadingConfidence headingCfd = 2;   //可选，航向精度
    enum SteeringWheelAngleConfidence{
        STEERING_WHEEL_ANGLE_CONFID_UNAVAILABLE = 0;
        STEERING_WHEEL_ANGLE_CONFID_PREC2DEG = 1; //2度
        STEERING_WHEEL_ANGLE_CONFID_PREC1DEG = 2; //1度
        STEERING_WHEEL_ANGLE_CONFID_PREC0_02DEG = 3; //0.02度
    };
    SteeringWheelAngleConfidence steerCfd = 3;  //可选，方向盘转角精度
}

//车辆尺寸     
message VehicleSize{
    int32 width = 1; // 车辆车身宽度。分辨率为1cm。数值0表示无效数据。10m以内
    int32 length = 2; // 车辆车身长度。分辨率为1cm。数值0表示无效数据。40m以内
    int32 height = 3; // 车辆车身高度。分辨率为5cm。数值0表示无效数据
}

//车辆类型信息     
enum VehicleType{
    UNKNOWN_VEHICLE_CLASS= 0; // 未配备、未知或不可用
    PASSENGER_VEHICLE_TYPE_UNKNOWN= 10; //乘用车辆默认类型
    MOTOR_LIGHTTRUNK = 20; //小型卡 车、皮卡、面包车
    TRUCK_VEHICLE_TYPE_UNKNOWN= 25;// 大卡车、货车默认类型
    MOTORCYCLE_TYPE_UNKNOWN = 40;// 摩托车默认类型
    TRANSIT_TYPE_UNKNOWN= 50;//公交、短驳、换乘的默认类型
    EMERGENCY_TYPE_UNKNOWN = 60; //消防、救护、警车等特种车辆
}

//节点编号NodeReferenceId 
message NodeReferenceId{
    uint32 region = 1;  //全局唯一的地区 ID，取经纬度小数点后2位共同为region 编号
    uint32 nodeId = 2;  //地区内部唯一的节点 ID，取经纬度小数点后 3-4 位共同为 id编号
}

//地图所在位置  
message MapLocation{
    NodeReferenceId nodeId = 1;     //可选，所在交叉路口id
    string linkName = 2;    //可选，所在路段，由字符串表达的路段名称或者描述
    NodeReferenceId upstreamNodeId = 3;     //可选，所在路段的上游节点id
    uint32 sectionId = 4;    //可选，所在的分段路段
    uint32 laneId = 5;   //可选，LaneId所在的车道[1,255]
}

//关联车道    
message ReferenceLanes{
    uint32 referenceLanes = 1;    //定义路段中指定的关联车道。
                                //将指定车道号对应的比特位置1表示该车道为有效的关联车道。
                                //最多支持15条车道。车道号，以该车道行驶方向为参考，自左向右从1开始编号。
                                //转化为二进制后，二进制左起第x位数字为1对应的含义：
                                //reserved(0), lane1(1), lane2(2), lane3(3), lane4(4), lane5(5), 
                                //lane6(6), lane7(7), lane8(8), lane9(9), lane10(10), lane11(11),
                                //lane12(12), lane13(13), lane14(14), lane15(15)
}

//关联路段    
message ReferenceLink{
    NodeReferenceId upstreamNodeId = 1;   //上游节点ID
    NodeReferenceId downstreamNodeId = 2; //下LaneStatInfo游节点ID
    ReferenceLanes referenceLanes = 3;    //可选，定义路段中指定的关联车道
}

// 车道边界类型LaneBoundary
message LaneBoundary{
    uint32 laneBoundaryType = 1;    //可选，车道边界类型：
                                    //1, BOUNDARY_WHITE_SOLID_LINES //白实线
                                    //2, BOUNDARY_WHITE_DOTTED_LINES //白虚线
                                    //3, BOUNDARY_YELLOW_SOLID_LINES //黄实线
                                    //4, BOUNDARY_YELLOW_DOTTED_LINES //黄虚线
                                    //5, BOUNDARY_DOUBLE_YELLOW_LINES //双黄线
                                    //6, BOUNDARY_KERB //路缘，道牙
                                    //7, BOUNDARY_LOW_FENCE //低栅栏
                                    //8, BOUNDARY_HIGH_FENCE //高栅栏
                                    //9, BOUNDARY_POST_FENCE //立柱栅栏
                                    //10, BOUNDARY_UNKNOWN //未知
    repeated Position3D laneBoundaryPoints = 2; //可选，边界点列表
}

//________________________________________________________________________________
//信号控制信息

//相位倒计时状态TimeCountingDown    
message TimeCountingDown{
   uint32 startTime = 1; // [0,36001] 信号灯当前处于该灯色状态，则值为 0，否则为该灯色 状态下一次开始（据离当前）的时间
   uint32 minEndTime = 2; // 可选，[0,36001]表示当前时刻距离该相位状态下一次结束的最短时间（不管当前时刻该相位状态是否开始）。对于固定周期配时信号灯，minEndTime 应该等于 maxEndTime。
   uint32 maxEndTime = 3; // 可选，[0,36001] 表示当前时刻距离该相位状态下一次结束的最长时间（不管当前时刻该相位状态是否开始）。
   uint32 likelyEndTime = 4; // [0,36001] 表示当前时刻距离该相位状态下一次结束的估计时间（不管当前时刻该相位状态是否开始）。
                            //如果该信号灯相位是定周期、固定时长，则该数值就表示当前时刻距离该相位状态下一次结束的准确时间。如果信号灯当前相位是非固定配时（感应配时、手动控制等），则该数值表示预测的结束时间，且预测时间必须在minEndTime和maxEndTime之间，可能由历史数据或一些事件触发等来进行预测。如果当前灯色时长不断延长，则应同步更新likelyEndTime以实时反应最新配时方案。
                            //对于该相位只有固定一种相位状态时（常绿、黄闪等），应将该相位状态的likelyEndTime设置为36000。
   TimeConfidence timeConfidence = 5; // 可选，(0,200) 定义置信度。分辨率为0.005。上述 likelyEndTime 预测时间的置信度水平。
   uint32 nextStartTime = 6; // 可选，[0,36001] 如果当前该相位状态已开始（未结束），则该数值表示当前时刻距离该相位状态下一次开始的估计时长；如果当前该相位状态未开始，则表示当前时刻距离该相位状态第二次开始的时间。
                            //通常用在一些经济驾驶模式（ECO Drive）等相关的应用中
   uint32 nextDuration = 7; // 可选，[0,36001] 如果当前该相位状态已开始（未结束），则该数值表示该相位状态下一次开始后的持续时长；
                            //如果当前该相位状态未开始，则表示该相位状态第二次开始后的持续时长。与nextStartTime 配合使用，通常用在一些经济驾驶模式（ECO Drive）等相关的应用中
}

//相位灯态状态PhaseState   
message PhaseState{
    enum LightState{
        LIGHT_STATE_UNKNOWN=0;//未知
        LIGHT_STATE_DARK=1;//熄灭
        LIGHT_STATE_FLASHING_RED =2;//红闪
        LIGHT_STATE_RED=3;//红灯
        LIGHT_STATE_FLASHING_GREEN =4;//绿闪
        LIGHT_STATE_PERMISSIVE_GREEN=5;//通行允许相位
        LIGHT_STATE_PROTETED_GREEN=6;//通行保护相位
        LIGHT_STATE_YELLOW=7;//黄灯
        LIGHT_STATE_FLASHING_YELLOW=8;//黄闪
    };
    LightState light = 1; //灯色 
    TimeCountingDown timing = 2; //可选，倒计时配置
    enum LightType{
        LIGHT_TYPE_UNKNOWN = 0; //未知
        LIGHT_TYPE_CIRCLE = 1; //圆形
        LIGHT_TYPE_STRAIGHT = 2; //直行箭头
        LIGHT_TYPE_LEFT_TURN = 3; //左转箭头
        LIGHT_TYPE_RIGHT_TURN = 4; //右转箭头
        LIGHT_TYPE_TURN_ABOUT = 5; //掉头箭头
        LIGHT_TYPE_RESERVED = 6; //保留
    };
    LightType lightType = 3;    //可选,信号灯类型
}

//相位状态Phase    
message Phase {
    uint32 phaseId = 1; //相位编号 [0,255]
    repeated PhaseState phaseStates = 2;    //相位灯态状态列表
    Position3D phasePos = 3;    //可选，相位灯位置
}

//路口状态IntersectionState    
message IntersectionState {
    uint64 intersectionId = 1;	// 路口ID
    string status = 2;  // 可选，表示信号灯当前的控制模式状态，需根据信号控制系统实际的工作状态设置内部数值。
                        //表示信号灯当前的控制模式状态，需根据信号控制系统实际的工作状态设置内部数值。具体的设置方法如下。status 各比特位初始置 0，各条件分别独立判断和设置
                        //1:MANUAL_CONTROL_IS_ENABLED, 手动控制
                        //2:STOP_TIME_IS_ACTIVATED,信号控制中所有相位和倒计时均暂停变化。
                        //3:FAILURE_FLASH,信号控制系统故障灯闪烁，指示内部存在的硬件设备故障。
                        //4:PREEMPT_IS_ACTIVE,信号优先功能开启。公交等一些优先车辆可能会触发信号优先。
                        //5:SIGNAL_PRIORITY_IS_ACTIVE,信号灯相关相位正处于优先控制的临时状态。
                        //6:FIXED_TIME_OPERATION,信号系统处在定时控制状态。
                        //7:TRAFFIC_DEPENDENT_OPERATION,信号系统处在基于交通流的感应控制状态
                        //8:STAND_BY_OPERATION,信号系统处于待机状态，可能存在部分相位关闭、重启或初始化状态。
                        //9:FAILURE_MODE,信号控制系统发生内部执行错误。
                        //10:OFF,信号控制系统关闭。
                        //其他,一般不常用
                        //11:RECENT_MAP_MESSAGE_UPDATE,
                        //12:RECENT_CHANGE_IN_MAP_ASSIGNED_LANES_IDS_USED,
                        //13:NO_VALID_MAP_IS_AVAILABLE_AT_THIS_TIME ,
                        //14:NO_VALID_SPAT_IS_AVAILABLE_AT_THIS_TIME

    uint64 timestamp = 3; //产生消息的最早时间，UTC 时间，单位毫秒，19700101000到现在的毫秒
    TimeConfidence timeConfidence = 4; //可选，参考TimeConfidence
    repeated Phase phases = 5;	//多个相位
    string intersectionName = 6;    //可选，路口名称
}

//信号状态采集SpatData    
message SpatData{
    uint32 msgCnt = 1;	 //将 msgCount 初始化为一个随机值，其范围为 0 到 127。
    uint64 timestamp = 2;    // 产生消息的最早时间，UTC 时间，单位毫秒，19700101000到现在的毫秒
    repeated IntersectionState intersections = 3;   // 多个路口信号灯的属性和当前状态。
}

//________________________________________________________________________________
//交通参与者信息Participant

//规划路径点信息    
message PathPlanningPoint{
    Position3D pos = 1; // 定义经纬度和高，绝对位置
    PositionConfidenceSet posConfid = 2; // 可选，定义95%置信水平的位置（经纬度和高度）综合精度
    uint32 speed = 3; // 可选，定义车速大小，分辨率为0.02m/s，数值8191表示无效数值
    uint32 heading = 4; // 可选，车辆航向角。为车头方向与正北方向的顺时针夹角。分辨率为0.0125°。
    SpeedConfidence speedConfid	= 5; //可选，[0,7]，数值描述了95%置信水平的速度精度。该精度理论上只考虑了当前速度传感器的误差。但是，当系统能够自动检测错误并修正，相应的精度数值也成该提高。
    HeadingConfidence headingConfid = 6; // 可选，定义95%置信水平的航向精度，[0,7]
    AccelerationSet4Way acceleration	= 7; // 可选，定义车辆四轴加速度：纵/横/垂直加速度，横摆角速度
    AccelerationConfidence accelerationConfid = 8; // 可选，目标四轴加速度置信度
    uint32 estimatedTime = 9; // 可选，目标到达目标位置的时间，分辨率为10ms,[1,65535]
    TimeConfidence timeConfidence = 10; // 可选，定义事件的置信度;分辨率为0.005。[0,200]
    ReferenceLink posInMap = 11;    //可选，与 MAP 相关的车道和链接位置,
}

//历史轨迹PathHistoryPoint
message PathHistoryPoint {
  Position3D pos = 1; 	// 轨迹点位置
  uint32 timeOffset = 2; // 以10毫秒为单位，定义当前描述时刻（较早）相对于参考时间点（较晚）的偏差。用于车辆历史轨迹点的表达。值65535表示无效数据。
  uint32 speed = 3; // 可选，定义车速大小，分辨率为0.02m/s，数值8191表示无效数值
  PositionConfidenceSet posConfid = 4;  // 可选，定义95%置信水平的位置（经纬度和高度）综合精度
  uint32 heading = 5; // 可选，航向角，分辨率为0.0125°
}

//车牌类型
enum PlateType{
    UNKNOWN_PLATE = 0;    //未知UNKNOWN_PLATE_TYPE = 0; 未知类型
    LARGE_CAR_PLATE = 1; //大型汽车号牌
    SMALL_CAR_PLATE = 2; //小型汽车号牌
    EMBASSY_CAR_PLATE = 3; //使馆汽车号牌
    CONSULATE_CAR_PLATE = 4; //领馆汽车号牌
    OVERSEAS_CAR_PLATE = 5; //境外汽车号牌
    FOREIGN_CAR_PLATE = 6; //外籍汽车号牌
    ORDINARY_MOTORCYCLE_PLATE = 7;//普通摩托车号牌
    MOPED_PLATE = 8; //轻便摩托车号牌
    EMBASSY_MOTORCYCLE_PLATE = 9; //使馆摩托车号牌
    CONSULATE_MOTORCYCLE_PLATE = 10; //领馆摩托车号牌
    OVERSEAS_MOTORCYCLE_PLATE = 11; //境外摩托车号牌
    FOREIGN_MOTORCYCLE_PLATE = 12; //外籍摩托车号牌
    LOW_SPEED_PLATE = 13; //低速车号牌
    TRACTOR_PLATE = 14; //拖拉机号牌
    TRAILER_PLATE = 15; //挂车号牌
    COACH_CAR_PLATE = 16; //教练汽车号牌
    COACH_MOTORCYCLE_PLATE = 17; //教练摩托车号牌
    TEMPORARY_ENTRY_PLATE = 20;//临时入境汽车号牌
    TEMPORARY_ENTRY_MOTORCYCLE_PLATE = 21;//临时入境摩托车号牌
    TEMPORARY_DRIVING_PLATE = 22; //临时行驶车号牌
    POLICE_CAR_PLATE = 23; //警用汽车号牌
    POLICE_MOTORCYCLE_PLATE = 24; //警用摩托车号牌
    ORIGINAL_AGRICULTURAL_MACHINERY_PLATE = 25; //原农机号牌
    HONGKONG_PLATE = 26; //香港入出境号牌
    MACAU_PLATE = 27; //澳门入出境号牌
    ARMED_POLICE_PLATE = 31; //武警号牌
    ARMY_PLATE = 32; //军队号牌
    NO_NUMBER_PLATE = 41; //无号牌
    FAKE_PLATE = 42; //假号牌
    MISAPPROPRIATION_PLATE = 43; //挪用号牌
    UNRECOGNIZED_PLATE = 44; //无法识别
    LARGE_NEW_ENERGY_YEtimestampLLOW_GREEN_PLATE = 51;   //大型新能源汽车（左侧黄色右侧绿色双拼色底黑字）
    SMALL_NEW_ENERGY_GREEN_PLATE = 52;          //小型新能源汽车（渐变绿底黑字）
    OTHER_PLATE = 99;   //其他
};   

//交通参与者信息Participant
message ParticipantData {
    uint32 ptcId = 1; // 目标对象ID,相同ID表示同一个目标物。[0,65535]
    ParticipantType ptcType=2;    //路侧单元检测到的交通参与者类型。
    DataSource dataSource = 3; // 数据源
    string deviceIdList = 4;    //  数据融合的来源设备id，json数组
    uint64 timestamp = 5;    //Unix时间戳，交通参与者检测时间，毫秒
    TimeConfidence timeConfidence = 6;  //可选，时间置信度
    Position3D ptcPos = 7; //交通参与者位置
    MapLocation mapLocation = 8;    //可选，所在地图位置，有地图信息时填写
    PositionConfidenceSet posConfid = 9; // 可选，定义95%置信水平的位置（经纬度和高度）综合精度
    uint32 speed = 10; // 速度，单位为0.02 m/s，[0,8191]
    uint32 heading = 11; //车辆航向角。为车头方向与正北方向的顺时针夹角。分辨率0.0125度，范围0到359.9875度，[0,28800]
    MotionConfidenceSet motionConfid = 12;  //可选，运动状态精度，ptc中包括speedConfidence和headingConfid
    AccelerationSet4Way accelSet = 13; // 可选，定义车辆四轴加速度：纵/横/垂直加速度，横摆角速度
    AccelerationConfidence accelerationConfid = 14; //可选，目标四轴加速度置信度
    ParticipantSize ptcSize = 15;   //可选，交通参与者尺寸信息
    string vehicleBand = 16;    //可选，车辆品牌
    VehicleType vehicleType	= 17; //可选，车型类型
    string plateNo = 18; //可选，车牌号，字符串，最大为36个字符，支持中文和数字，建议使用utf-8编码
    PlateType plateType = 19; //可选，车牌类型
    enum PlateColor{
        UNKNOWN_PLATE_COLOR = 0;                    //未知
        BLUE_PLATE = 1;     //蓝;
        YELLOW_PLATE = 2;   //黄;
        WHITE_PLATE = 3;    //白;
        BLACK_PLATE = 4;    //黑;
        YELLOW_GREEN_PLATE = 5;         //黄绿双色;
        GRADIENT_GREEN_PLATE = 6;    //渐变绿
    };
    PlateColor plateColor = 20;   //可选，车牌颜色
    enum VehicleColor{
        UNKNOWN_VEHICEL_COLOR = 0;    //未知
        WHITE = 1;  //白色
        GRAY = 2;   //灰色
        YELLOW = 3; //黄色
        PINK = 4;   //粉色
        RED = 5;    //红色
        GREEN = 6;  //绿色
        BLUE = 7;   //蓝色
        BROWN = 8;  //棕色
        BLACK = 9;  //黑色
        PURPLE = 10;   //紫色
        OTHER = 11; //其他
    };
    VehicleColor vehicleColor = 21;	 //可选，车辆颜色
    ParticipantSizeConfidence ptcSizeConfid = 22; // 可选，目标尺寸置信度
    enum ParticipantTypeExt{
        UNKNOWN_OBJECT_TYPE_EXT=0;  // 未知障碍物
        UNKNOWN_MOVABLE=1; // 未知可移动障碍物
        UNKNOWN_UNMOVABLE=2; // 未知不可移动障碍物
        CAR=3; // 轿车、SUV
        VAN=4; // 面包车
        TRUCK=5; // 卡车
        BUS=6; // 大巴
        CYCLIST=7; // 自行车
        MOTORCYCLIST=8; //摩托车
        TRICYCLIST=9; //三轮车、老年人代步车
        PEDESTRIAN=10; //行人
    };
    ParticipantTypeExt ptcTypeExt = 23;	// 可选，目标类型扩展
    uint32 ptcTypeConfid = 24; // 可选，定义目标类型扩展的置信度;分辨率为0.005。[0,200]
    uint32 statusDuration = 25; // 可选，以10毫秒为单位，定义当前描述时刻（较早）相对于参考时间点（较晚）的偏差。用于车辆历史轨迹点的表达。值65535表示无效数据。
    repeated PathHistoryPoint pathHistory = 26;	// 可选，目标历史轨迹
    uint32 tracking = 27;  // 可选，目标追踪时间，单位s
    Polygon polygon = 28; // 可选，障碍物影响区域点集合
    repeated PathPlanningPoint pathPlanning = 29; //规划/预测路径
}

//________________________________________________________________________________
//障碍物信息Obstacles

//障碍物类型     
enum ObstaclesType{
    UNKNOWN_OBSTACLES_TYPE = 0;//未知 ;
    ROCKFALL = 1;   //崩岩;
    LANDSLIDE = 2;  //滑坡;
    ANIMAL_INTRUSION = 3;   //动物入侵;
    LIQUID_SPILL = 4;   //液体溢出;
    GOODS_SCATTERED = 5;     //货物散落;
    TRAFFICCONE = 6;    //交通;
    SAFETY_TRIANGLE = 7;    //三角牌;
    TRAFFIC_ROADBLOCK = 8;  //交通路障;
    INSPECTION_SHAFT_WITHOUT_COVER = 9; // 无盖井;
    UNKNOWN_FRAGMENTS = 10;     //未知碎片;
    UNKNOWN_HARD_OBJECT = 11;   //未知硬物体;
    UNKNOWN_SOFT_OBJECT = 12;   //未知软物体;
}

//障碍物信息ObstacleData    
message ObstacleData {
    uint64 obsId = 1; // 障碍物ID
    ObstaclesType obsType = 2; // 障碍物类型
    uint32 obsTypeCfd = 3; // 可选，定义障碍物类型的置信度;分辨率为0.005。[0,200]
    DataSource obsSource = 4; // 障碍物数据来源
    uint64 timestamp = 5;    //时间戳
    string deviceIdList=6;  //数据融合的来源设备id,json数组
    Position3D obsPos = 7; // 定义障碍物经纬度和高，绝对位置
    PositionConfidenceSet posConfid = 8; // 可选，定义95%置信水平的障碍物位置（经纬度和高度）综合精度
    MapLocation mapLocation = 9;    //可选，所在地图位置，有地图信息时填写
    uint32 speed = 10;// 障碍物速度，分辨率为0.02m/s，数值8191表示无效数值
    uint32 heading = 11;  // 障碍物航向角，运行方向与正北方向的顺时针夹角。分辨率为0.0125°
    MotionConfidenceSet motionConfid = 12;  //可选，运动状态置信度
    uint32 verSpeed = 13;    //可选，障碍物垂直速度，分辨率为0.02m/s，数值8191表示无效数值
    SpeedConfidence verSpeedConfid = 14;    // 可选，数值描述了95%置信水平的速度精度。该精度理论上只考虑了当前速度传感器的误差。但是，当系统能够自动检测错误并修正，相应的精度数值也成该提高
    AccelerationSet4Way acceleration = 15; // 可选，定义四轴加速度：纵/横/垂直加速度，横摆角速度
    ParticipantSize size = 16; // 障碍物尺寸大小
    ParticipantSizeConfidence obsSizeConfid = 17; // 可选，障碍物尺寸大小置信度
    uint32 tracking = 18; // 可选，障碍物追踪时间，单位s
    Polygon polygon = 19; // 可选，障碍物影响区域点集合
}

//________________________________________________________________________________
//车端状态信息VSM

//车辆刹车系统状态 BrakeSystemStatus  
message BrakeSystemStatus {
    enum BrakePedalStatus {
        UNAVAILABLE_PEDAL = 0; // 车辆制动踏板检测器不可用
        OFF_PEDAL = 1; // 车辆制动踏板未踩下
        ON_PEDAL = 2;//踩下车辆的制动踏板
    };
    enum TractionControlStatus {
        UNAVAILABLE_TRACTION = 0; //系统未装备或不可用;
        OFF_TRACTION = 1; //系统处于关闭状态;
        ON_TRACTION = 2; //系统处于开启状态，但未触发;
        ENGAGED_TRACTION = 3; //系统被触发，处于作用状态.
    };
    enum AntiLockBrakeStatus {
        UNAVAILABLE_ABS = 0; //车辆未配备 ABS 刹车或 ABS 刹车状态不可用;
        OFF_ABS = 1; //车辆的 ABS关闭;
        ON_ABS = 2; // 车辆的 ABS开启（但未接合）;
        ENGAGED_ABS = 3; //车辆的ABS控制在任何车轮上接合.
    };
    enum StabilityControlStatus{
        UNAVAILABLE_SCS = 0; //系统未装备或不可用;
        OFF_SCS = 1; //系统处于关闭状态;
        ON_SCS = 2; //系统处于开启状态，但未触发;
        ENGAGED_SCS = 3; //系统被触发，处于作用状态.
    };
    enum BrakeBoostApplied {
        UNAVAILABLE_BBA = 0; //车辆未配备制动助力或制动助力数据不可用
        OFF_BBA = 1; //车辆制动助力关闭
        ON_BBA = 2; //车辆的制动助力开启（应用）
    };
    enum AuxiliaryBrakeStatus {
        UNAVAILABLE_AUX = 0; //车辆未配备辅助制动器或辅助制动器状态不可用;
        OFF_AUX = 1; //车辆的辅助制动器关闭;
        ON_AUX = 2; //车辆的辅助制动器开启;
        ENGAGED_AUX = 3;//保留.
    };
    BrakePedalStatus brakePadel = 1;// 可选，刹车踏板踩下情况
    uint32 wheelBrakes = 2; // 可选，车轮制动情况BrakeAppliedStatus，位串，转化为二进制后，二进制左起第x位数字为1对应的含义：
                            // 1:LEFT_FRONT; //左前活动;
                            // 2:LEFT_REAR;  //左后主动;
                            // 3:RIGHT_FRONT;  //右前活动;
                            // 4:RIGHT_REAR; //右后主动。                      
    TractionControlStatus traction = 3; //可选，牵引力控制系统作用情况
    AntiLockBrakeStatus abs = 4; //可选，制动防抱死系统作用情况
    StabilityControlStatus scs = 5; // 可选，车身稳定控制系统作用情况
    BrakeBoostApplied brakeBoost = 6; //可选，刹车助力系统作用情况
    AuxiliaryBrakeStatus auxBrakes = 7; //可选，辅助制动系统（一般指手刹）情况
    uint32 brakeControl = 8;  //可选，刹车踩踏强度 百分比：0~100%，精度0.1% BrakeControl类型
}

//定位精度  
message PositionAccuracy{
    int32 semiMajor = 1; // 定义用椭圆模型表示的GNSS系统精度中半长轴的大小，单位为0.05米。
    int32 semiMinor = 2; // 定义用椭圆模型表示的GNSS系统精度中半短轴的大小，单位为0.05米。
    int32 orientation = 3; // 定义用椭圆模型表示的GNSS系统精度中正北方向顺时针到最近半长轴的夹角大小，单位为0.0054932479°。
}

//定义车辆的给油系统状态 ThrottleSystemStatus   
message ThrottleSystemStatus{
    uint32 thorttleControl = 1;    //油门踩踏强度 百分比：0~100%，精度0.1%
    enum ThrottlePedalStauts{
        UNAVAILABLE_PEDAL = 0;    //，车辆油门踏板检测器不可用； 
        OFF = 1;  //，车辆油门踏板未踩下；
        ON = 2;   //，踩下车辆的油门踏板；
    }
    ThrottlePedalStauts throttlePadel = 2;  //可选，油门踏板踩下情况
    int32 wheelThrottles = 3;   //ThrottleAppliedStatus四轮分别的动力情况,位串,转化为二进制后，二进制左起第x位数字为1对应的含义：
                                //  LEFT_FRONT=1, 左前活动；
                                //LEFT_REAR=2, 左后活动；
                                //RIGHT_FRONT=3, 右前活动；
                                //RIGHT_REAR=4，右后活动。
}

//车端状态信息VSM   
message VsmData{
    string obuId = 1;	// 车辆 Id（OBU 设备序列号）
    string plateNo = 2;	 // 可选，车牌号，字符串，最大为36个字符，支持中文和数字
    uint64 timestamp = 3;  // 产生消息的最早时间，UTC 时间，单位毫秒，19700101000到现在的毫秒
    Position3D pos = 4; // 经纬度和高程信息
    PositionConfidenceSet posConfid = 5;  // 可选，定义95%置信水平的障碍物位置（经纬度和高度）综合精度
    PositionAccuracy posAccuracy = 6; // 可选，定位精度，定义用椭圆模型表示的GNSS系统精度
    AccelerationSet4Way acceleration = 7;	// 可选，定义四轴加速度：纵/横/垂直加速度，横摆角速度
    enum TransmissionState{
        TRANSMISSION_NEUTRAL = 0; // 空挡;
        TRANSMISSION_PARK = 1; //停止档;
        TRANSMISSION_FORWARD_GEARS = 2; // 前进档;
        TRANSMISSION_REVERSE_GEARS = 3; // 倒挡
        TRANSMISSION_RESERVED1 = 4; // 保留
        TRANSMISSION_RESERVED2 = 5; // 保留
        TRANSMISSION_RESERVED3 = 6; // 保留
        TRANSMISSION_UNAVAILABLE = 7; // 未配备或不可用的值，
    }
    TransmissionState transmission = 8; //可选，车辆档位[0,7]
    uint32 speed = 9; // 定义车速大小，分辨率为0.02m/s，数值8191表示无效数值
    uint32 heading = 10;    // 航向角，为车头方向与正北方向的顺时针夹角。分辨率为0.0125°
    int32 steeringWheelAngle = 11;	// 可选，[-240, 240]	方向盘角度，分辨率为1.5°
    MotionConfidenceSet motionConfid = 12;  //可选，车辆运动状态精度
    BrakeSystemStatus brakes = 13; // 可选，定义车辆的刹车系统状态，包括了7种不同类型的状态
    ThrottleSystemStatus throttle = 14;     //可选，定义车辆的给油系统状态
    VehicleSize size = 15; // 车辆尺寸
    VehicleType vehicleType = 16; // 车辆基本类型
    enum VehicleFuelType{
        VEHICLE_TUEL_UNKNOWNFUEL = 0; // 汽油动力
        GASOLINE = 1; // 汽油燃料类型
        ETHANOL = 2; // 乙醇（包括混合）
        DIESEL = 3; // 柴油机
        ELECTRIC = 4; // 电动
        HYBRID = 5; // 混合
        HYDROGEN = 6; // 氢燃料类型
        NATGASLIQUID = 7; // 天然气液化
        NATGASCOMP = 8; // 天然气压缩
        PROPANE = 9; // 丙烷
    };
    VehicleFuelType fuelType = 17;	// 可选，车辆燃油类型
    enum DriveStatus{
        AUTOPILOT = 0; //自动驾驶模式
        MANUAL = 1; //人工驾驶模式
        SECURITY=2; //人工接管模式
    };
    DriveStatus driveModedriveStatus = 18;	// 可选，驾驶状态 1：自动驾驶模式 2：人工驾驶模式 3：人工接管模式
    enum EmergenyStatus{
        NO_EMER = 0;
        YES_EMER = 1;
    };
    EmergenyStatus emergencyStatus = 19; // 可选，危险报警闪光灯（双闪） 0否 1是
    uint32 light = 20;   //可选，灯光状态，转化为二进制后，二进制左起第x位数字为1对应的含义：
                        //1：OFF 未开灯；
                        //2：LEFT 左转灯；
                        //3-RIGHT 右转灯；
                        //4-EMERGENCY 双闪；
                        //5-REVERSE 倒车；
                        //6-FOG 雾灯；
                        //7-DIP 近光灯；
                        //8-HIGH 远光灯
    enum Wiper{
        OFF = 0;  //未开启；
        INT = 1;    // 间歇；
        LO = 2; //低速；
        HI = 3; //高速
    }
    Wiper wiper = 21;   //可选，雨刷
    enum OutofControl{
        NO_OUTCON = 0;
        YES_OUTCON = 1;
    };
    OutofControl outofControl = 22; // 可选，车辆失控 0 否 1 是
    uint32 endurance = 23;      // 可选，续航里程 单位0.01 km
    PathNavigation pathNavigation = 24;     // 可选，导航路径
    repeated ParticipantData participants = 25;     // 可选，动态障碍物/其他交通参与者
    repeated ObstacleData obstacles = 26;     // 可选，静态障碍物
    repeated LaneBoundary laneBoundary = 27;     // 可选，标线
    SpatData spatData = 28;     // 可选，相位信息
    string reqInfo = 29;    // 可选，车辆的请求行为(待定)
}

//________________________________________________________________________________
//合作感知信息CAM
//示场地类型   
enum SceneType{
    SCENE_TYPE_URBAN = 0; // 表示开放区域（城市道路）;
    SCENE_TYPE_HIGHSPEED = 1 ; // 表示半封闭区域（高速高架、桥梁隧道）;
    SCENE_TYPE_CLOSEDPARK = 2; // 表示封闭限定区域（园区、机场、停车场），
    SCENE_TYPE_RESERVED = 3; //为预留
}

//合作感知信息   
message CamData {
    uint32 type = 1; // type取值为1,表示MEC向RSU发送目标物和事件信息
    string ver = 2;	// 版本号，目前版本固定为“01”
    uint32 msgCnt = 3; // 定义消息编号。发送方对发送的同类消息(type=1)依次进行编号。编号循环发送。
    uint64 timestamp = 4; // 产生消息的最早时间，UTC 时间，单位毫秒，19700101000到现在的毫秒
    string deviceId = 5; // MEC的设备编号。例如，MEC的ESN编号，或者每个MEC的序列编号。只支持可见字符（ASCII码[32,126]）。
    string mapDeviceId = 6; //位置相关的设备编号
    Position3D refPos = 7; // 位置基准参考点,绝对坐标(感知区域中心点)。注：MEC的的经纬度坐标位置。
    SceneType sceneType	= 8; // 可选，表示场地类型
    repeated ParticipantData ptcList = 9; //可选，定义目标物列表，属于RSM中的交通参与者
    SpatData roadSignalState = 10; // 可选，实时交通相位SPAT信息
    repeated Polygon detectedRegion = 11; // 可选，定义感知区域列表
    uint64 toAlgorithmTime = 12; //  可选，到达融合算法的时间戳，UTC 时间，单位毫秒，19700101000到现在的毫秒
    uint64 toDatabusTime = 13; // 可选，到达当前接收端的时间戳，UTC 时间，单位毫秒，19700101000到现在的毫秒
    uint64 toCloudTime = 14; // 可选，到达云端的时间戳，UTC 时间，单位毫秒，19700101000到现在的毫秒
}

//________________________________________________________________________________
//广播信息CloudToAll
message CloudToAll{
    uint64 timestamp = 1;   //产生消息的最早时间，UTC 时间，单位毫秒，19700101000到现在的毫秒
    repeated ParticipantData participants = 2;  //可选,动态障碍物
    repeated ObstacleData obstacles = 3;    //可选,静态障碍物
    repeated SpatData spatData = 4; //可选,信号灯
}

//________________________________________________________________________________

//导航路径PathNavigation
message PathNavigation{
    repeated Position3D pathNavigation = 1;   //导航路径点，至少4个点，至多32个点
}

//车辆决策信息（点对点）CloudToV
message CloudToV{
    uint64 obuId = 1;   //obu ID
    enum SceneId{
        SCENE_ID_0 = 0;     //未知
        SCENE_ID_1 = 1;     //无信号交叉口多车协同通行
        SCENE_ID_2 = 2;     //轻车熟路协作式同行
        SCENE_ID_3 = 3;     //车路协同主动式行人车辆避障功能
        SCENE_ID_4 = 4;     //路云辅助式故障车辆自动定位与诊断
        SCENE_ID_5 = 5;     //虚拟车位自主泊车
        SCENE_ID_6 = 6;     //车路协同干线绿波同行
    }
    SceneId sceneId = 2;    //场景编号
    PathNavigation pathNavigation = 3;  //可选,导航路径
    repeated PathPlanningPoint pathPlanning = 4;  //可选,规划路径
    enum DecisionCommand{
        DECISION_COMMAND_UNKNOWN = 0;  //未知
        DECISION_COMMAND_LEFT = 1;  //向左换道
        DECISION_COMMAND_RIGHT = 2;  //向右换道
        DECISION_COMMAND_OVERTAKE = 3;  //超车
        DECISION_COMMAND_FOLLOW = 4;  //跟车
        DECISION_COMMAND_STOP = 5;  //停车
        DECISION_COMMAND_YIELD = 6;  //让行
        DECISION_COMMAND_PARKING = 7;  //泊车
    }
    DecisionCommand decisionCommand = 5;    //可选,车辆决策指令
    uint64 timestamp = 6;   //产生消息的最早时间，UTC 时间，单位毫秒，19700101000到现在的毫秒
    AccelerationSet4Way acceleration = 7;   //可选,定义四轴加速度：纵/横/垂直加速度，横摆角速度
    uint32 speed = 8;   //可选,定义车速大小，分辨率为0.02m/s，数值8191表示无效数值
    int32 steeringWheelAngle = 9;   //可选,方向盘角度，分辨率为1.5°，[-240,240]
    BrakeSystemStatus brakes = 10; //可选,定义车辆的刹车系统状态，包括了8种不同类型的状态
    ThrottleSystemStatus throttle = 11;  //可选,定义车辆的给油系统状态
}

//________________________________________________________________________________
//回执消息 CloudSendReply  【电科自用】
message CloudSendReply{
    uint64 id = 1;
    uint32 eventType = 2; //事件类型 0-rte,1-rts
    string sourceDeviceId = 3; //来源设备编码
    string targetDeviceId = 4; //目标设备编码
    string creatTime =5; //创建事件
    string distributionTime = 6; //下发时间
    string completionTime = 7; //完成时间
    string updateTime = 8; //更新时间
    uint32 operationType = 9; //操作类型 0-自动 1-手工,2-未知
    uint64 camDataId = 10; //cam外键
    uint64 rteDataId = 11; //rte外键
    uint64 rtsDataId = 12; //rts外键
    uint64 eventSourceId = 13; //事件来源
    uint64 distributionStatusId = 14; //下发状态，0-未知，1-下发中，2-已下发，3-下发失败
    string sourceTopic = 15;  //转发状态的源topic编码，电科自用
    string targetTopic = 16;    //转发状态的目标topic编码，电科自用
}

//监控统计消息 MonitorStatistics   【电科自用】
message MonitorStatistics{
    string deviceId = 1;    // 发送设备的deviceId编号
    uint64 timestamp = 2;   // 产生消息的最早时间，UTC 时间，单位秒，19700101000到现在的毫秒
    uint64 camCount = 3;    // 当前小时初到当前时间发送cam消息总条数，最大时间间隔1小时
    uint32 participantCount = 4;    // 当前小时初到当前时间发送交通参与者消息总条数，最大时间间隔1小时
    uint32 rteCount = 5;    // 当前小时初到当前时间发送事件消息条数，最大时间间隔1小时
    uint32 rtsCount = 6;    //当前小时初到当前时间发送rts消息条数，最大时间间隔1小时
    uint32 trafficflowCount = 7;    // 当前小时初到当前时间发送trafficflow消息条数，最大时间间隔1小时
    uint32 trafficflowStatCount = 8; //当前小时初到当前时间发送trafficflow_stat消息条数，最大时间间隔1小时
    uint32 intersectionStatCount = 9;// 当前小时初到当前时间发送intersection_stat消息条数，最大时间间隔1小时
    uint32 phaseStatCount = 10;     //当前小时初到当前时间发送phase_stat消息条数，最大时间间隔1小时
    uint32 radarPathListCount = 11; // 当前小时初到当前时间发送radar_path_list消息条数，最大时间间隔1小时
    uint32 radarPathCount = 12;     // 当前小时初到当前时间发送radar_path消息条数，最大时间间隔1小时
    uint32 cameraPathListCount = 13;    // 当前小时初到当前时间发送camera_path_list消息条数，最大时间间隔1小时3
    uint32 cameraPathCount = 14;    // 当前小时初到当前时间发送camera_path消息条数，最大时间间隔1小时8
}


