// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: routing_service.proto

#include "routing_service.pb.h"
#include "routing_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace routing_service {

static const char* RoutingService_method_names[] = {
  "/routing_service.RoutingService/FindReferenceRoad",
};

std::unique_ptr< RoutingService::Stub> RoutingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RoutingService::Stub> stub(new RoutingService::Stub(channel));
  return stub;
}

RoutingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FindReferenceRoad_(RoutingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RoutingService::Stub::FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::routing_service::RefRoad* response) {
  return ::grpc::internal::BlockingUnaryCall< ::routing_service::TaskPoints, ::routing_service::RefRoad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindReferenceRoad_, context, request, response);
}

void RoutingService::Stub::experimental_async::FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::routing_service::TaskPoints, ::routing_service::RefRoad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindReferenceRoad_, context, request, response, std::move(f));
}

void RoutingService::Stub::experimental_async::FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindReferenceRoad_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routing_service::RefRoad>* RoutingService::Stub::PrepareAsyncFindReferenceRoadRaw(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::routing_service::RefRoad, ::routing_service::TaskPoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindReferenceRoad_, context, request);
}

::grpc::ClientAsyncResponseReader< ::routing_service::RefRoad>* RoutingService::Stub::AsyncFindReferenceRoadRaw(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindReferenceRoadRaw(context, request, cq);
  result->StartCall();
  return result;
}

RoutingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoutingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoutingService::Service, ::routing_service::TaskPoints, ::routing_service::RefRoad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoutingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::routing_service::TaskPoints* req,
             ::routing_service::RefRoad* resp) {
               return service->FindReferenceRoad(ctx, req, resp);
             }, this)));
}

RoutingService::Service::~Service() {
}

::grpc::Status RoutingService::Service::FindReferenceRoad(::grpc::ServerContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace routing_service

