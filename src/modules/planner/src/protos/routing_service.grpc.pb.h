// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: routing_service.proto
#ifndef GRPC_routing_5fservice_2eproto__INCLUDED
#define GRPC_routing_5fservice_2eproto__INCLUDED

#include "routing_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace routing_service {

class RoutingService final {
 public:
  static constexpr char const* service_full_name() {
    return "routing_service.RoutingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::routing_service::RefRoad* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RefRoad>> AsyncFindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RefRoad>>(AsyncFindReferenceRoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RefRoad>> PrepareAsyncFindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RefRoad>>(PrepareAsyncFindReferenceRoadRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RefRoad>* AsyncFindReferenceRoadRaw(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RefRoad>* PrepareAsyncFindReferenceRoadRaw(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::routing_service::RefRoad* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::RefRoad>> AsyncFindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::RefRoad>>(AsyncFindReferenceRoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::RefRoad>> PrepareAsyncFindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::RefRoad>>(PrepareAsyncFindReferenceRoadRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindReferenceRoad(::grpc::ClientContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::routing_service::RefRoad>* AsyncFindReferenceRoadRaw(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::RefRoad>* PrepareAsyncFindReferenceRoadRaw(::grpc::ClientContext* context, const ::routing_service::TaskPoints& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindReferenceRoad_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FindReferenceRoad(::grpc::ServerContext* context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindReferenceRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindReferenceRoad() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindReferenceRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindReferenceRoad(::grpc::ServerContext* /*context*/, const ::routing_service::TaskPoints* /*request*/, ::routing_service::RefRoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindReferenceRoad(::grpc::ServerContext* context, ::routing_service::TaskPoints* request, ::grpc::ServerAsyncResponseWriter< ::routing_service::RefRoad>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindReferenceRoad<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindReferenceRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindReferenceRoad() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::routing_service::TaskPoints, ::routing_service::RefRoad>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routing_service::TaskPoints* request, ::routing_service::RefRoad* response) { return this->FindReferenceRoad(context, request, response); }));}
    void SetMessageAllocatorFor_FindReferenceRoad(
        ::grpc::experimental::MessageAllocator< ::routing_service::TaskPoints, ::routing_service::RefRoad>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::routing_service::TaskPoints, ::routing_service::RefRoad>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FindReferenceRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindReferenceRoad(::grpc::ServerContext* /*context*/, const ::routing_service::TaskPoints* /*request*/, ::routing_service::RefRoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindReferenceRoad(
      ::grpc::CallbackServerContext* /*context*/, const ::routing_service::TaskPoints* /*request*/, ::routing_service::RefRoad* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindReferenceRoad(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routing_service::TaskPoints* /*request*/, ::routing_service::RefRoad* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_FindReferenceRoad<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_FindReferenceRoad<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindReferenceRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindReferenceRoad() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindReferenceRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindReferenceRoad(::grpc::ServerContext* /*context*/, const ::routing_service::TaskPoints* /*request*/, ::routing_service::RefRoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindReferenceRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindReferenceRoad() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindReferenceRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindReferenceRoad(::grpc::ServerContext* /*context*/, const ::routing_service::TaskPoints* /*request*/, ::routing_service::RefRoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindReferenceRoad(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindReferenceRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindReferenceRoad() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindReferenceRoad(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindReferenceRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindReferenceRoad(::grpc::ServerContext* /*context*/, const ::routing_service::TaskPoints* /*request*/, ::routing_service::RefRoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindReferenceRoad(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindReferenceRoad(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindReferenceRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindReferenceRoad() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::routing_service::TaskPoints, ::routing_service::RefRoad>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::routing_service::TaskPoints, ::routing_service::RefRoad>* streamer) {
                       return this->StreamedFindReferenceRoad(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindReferenceRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindReferenceRoad(::grpc::ServerContext* /*context*/, const ::routing_service::TaskPoints* /*request*/, ::routing_service::RefRoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindReferenceRoad(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routing_service::TaskPoints,::routing_service::RefRoad>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindReferenceRoad<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindReferenceRoad<Service > StreamedService;
};

class MapService final {
 public:
  static constexpr char const* service_full_name() {
    return "routing_service.MapService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 更新车辆信息（同时包括注册）
    std::unique_ptr< ::grpc::ClientWriterInterface< ::routing_service::CarInfo>> UpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::routing_service::CarInfo>>(UpdateCarInfoRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::routing_service::CarInfo>> AsyncUpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::routing_service::CarInfo>>(AsyncUpdateCarInfoRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::routing_service::CarInfo>> PrepareAsyncUpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::routing_service::CarInfo>>(PrepareAsyncUpdateCarInfoRaw(context, response, cq));
    }
    // 移动端请求最近的空闲车辆
    virtual ::grpc::Status GetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point& request, ::routing_service::CarInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>> AsyncGetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>>(AsyncGetOneAvailableCarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>> PrepareAsyncGetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>>(PrepareAsyncGetOneAvailableCarRaw(context, request, cq));
    }
    // 移动端以车辆id请求其信息
    virtual ::grpc::Status GetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::routing_service::CarInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>> AsyncGetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>>(AsyncGetCarInfoByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>> PrepareAsyncGetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>>(PrepareAsyncGetCarInfoByIdRaw(context, request, cq));
    }
    // 从移动端获取终点，计算任务点（不能太远），返回规划结果（TODO: 待商榷）
    virtual ::grpc::Status SendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::routing_service::RoadPoints* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RoadPoints>> AsyncSendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RoadPoints>>(AsyncSendTaskPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RoadPoints>> PrepareAsyncSendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RoadPoints>>(PrepareAsyncSendTaskPointRaw(context, request, cq));
    }
    // 车辆等待下一个任务点
    virtual ::grpc::Status WaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::routing_service::TaskPoint* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::TaskPoint>> AsyncWaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::TaskPoint>>(AsyncWaitForTaskPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::TaskPoint>> PrepareAsyncWaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::TaskPoint>>(PrepareAsyncWaitForTaskPointRaw(context, request, cq));
    }
    // 结束任务
    virtual ::grpc::Status FinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncFinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncFinishTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncFinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncFinishTaskRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 更新车辆信息（同时包括注册）
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::routing_service::CarInfo>* reactor) = 0;
      #else
      virtual void UpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::experimental::ClientWriteReactor< ::routing_service::CarInfo>* reactor) = 0;
      #endif
      // 移动端请求最近的空闲车辆
      virtual void GetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point* request, ::routing_service::CarInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point* request, ::routing_service::CarInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point* request, ::routing_service::CarInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 移动端以车辆id请求其信息
      virtual void GetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::routing_service::CarInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::routing_service::CarInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::routing_service::CarInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 从移动端获取终点，计算任务点（不能太远），返回规划结果（TODO: 待商榷）
      virtual void SendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest* request, ::routing_service::RoadPoints* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest* request, ::routing_service::RoadPoints* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest* request, ::routing_service::RoadPoints* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 车辆等待下一个任务点
      virtual void WaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::routing_service::TaskPoint* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::routing_service::TaskPoint* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::routing_service::TaskPoint* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 结束任务
      virtual void FinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::routing_service::CarInfo>* UpdateCarInfoRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::routing_service::CarInfo>* AsyncUpdateCarInfoRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::routing_service::CarInfo>* PrepareAsyncUpdateCarInfoRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>* AsyncGetOneAvailableCarRaw(::grpc::ClientContext* context, const ::routing_service::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>* PrepareAsyncGetOneAvailableCarRaw(::grpc::ClientContext* context, const ::routing_service::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>* AsyncGetCarInfoByIdRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::CarInfo>* PrepareAsyncGetCarInfoByIdRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RoadPoints>* AsyncSendTaskPointRaw(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::RoadPoints>* PrepareAsyncSendTaskPointRaw(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::TaskPoint>* AsyncWaitForTaskPointRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routing_service::TaskPoint>* PrepareAsyncWaitForTaskPointRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncFinishTaskRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncFinishTaskRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::routing_service::CarInfo>> UpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::routing_service::CarInfo>>(UpdateCarInfoRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::routing_service::CarInfo>> AsyncUpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::routing_service::CarInfo>>(AsyncUpdateCarInfoRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::routing_service::CarInfo>> PrepareAsyncUpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::routing_service::CarInfo>>(PrepareAsyncUpdateCarInfoRaw(context, response, cq));
    }
    ::grpc::Status GetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point& request, ::routing_service::CarInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>> AsyncGetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>>(AsyncGetOneAvailableCarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>> PrepareAsyncGetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>>(PrepareAsyncGetOneAvailableCarRaw(context, request, cq));
    }
    ::grpc::Status GetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::routing_service::CarInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>> AsyncGetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>>(AsyncGetCarInfoByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>> PrepareAsyncGetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>>(PrepareAsyncGetCarInfoByIdRaw(context, request, cq));
    }
    ::grpc::Status SendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::routing_service::RoadPoints* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::RoadPoints>> AsyncSendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::RoadPoints>>(AsyncSendTaskPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::RoadPoints>> PrepareAsyncSendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::RoadPoints>>(PrepareAsyncSendTaskPointRaw(context, request, cq));
    }
    ::grpc::Status WaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::routing_service::TaskPoint* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::TaskPoint>> AsyncWaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::TaskPoint>>(AsyncWaitForTaskPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::TaskPoint>> PrepareAsyncWaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routing_service::TaskPoint>>(PrepareAsyncWaitForTaskPointRaw(context, request, cq));
    }
    ::grpc::Status FinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncFinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncFinishTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncFinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncFinishTaskRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::routing_service::CarInfo>* reactor) override;
      #else
      void UpdateCarInfo(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::experimental::ClientWriteReactor< ::routing_service::CarInfo>* reactor) override;
      #endif
      void GetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point* request, ::routing_service::CarInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point* request, ::routing_service::CarInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOneAvailableCar(::grpc::ClientContext* context, const ::routing_service::Point* request, ::routing_service::CarInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::routing_service::CarInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::routing_service::CarInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCarInfoById(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::routing_service::CarInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest* request, ::routing_service::RoadPoints* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest* request, ::routing_service::RoadPoints* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendTaskPoint(::grpc::ClientContext* context, const ::routing_service::TaskRequest* request, ::routing_service::RoadPoints* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void WaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::routing_service::TaskPoint* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::routing_service::TaskPoint* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WaitForTaskPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::routing_service::TaskPoint* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FinishTask(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::routing_service::CarInfo>* UpdateCarInfoRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::routing_service::CarInfo>* AsyncUpdateCarInfoRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::routing_service::CarInfo>* PrepareAsyncUpdateCarInfoRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>* AsyncGetOneAvailableCarRaw(::grpc::ClientContext* context, const ::routing_service::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>* PrepareAsyncGetOneAvailableCarRaw(::grpc::ClientContext* context, const ::routing_service::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>* AsyncGetCarInfoByIdRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::CarInfo>* PrepareAsyncGetCarInfoByIdRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::RoadPoints>* AsyncSendTaskPointRaw(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::RoadPoints>* PrepareAsyncSendTaskPointRaw(::grpc::ClientContext* context, const ::routing_service::TaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::TaskPoint>* AsyncWaitForTaskPointRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routing_service::TaskPoint>* PrepareAsyncWaitForTaskPointRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncFinishTaskRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncFinishTaskRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCarInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOneAvailableCar_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCarInfoById_;
    const ::grpc::internal::RpcMethod rpcmethod_SendTaskPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_WaitForTaskPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_FinishTask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 更新车辆信息（同时包括注册）
    virtual ::grpc::Status UpdateCarInfo(::grpc::ServerContext* context, ::grpc::ServerReader< ::routing_service::CarInfo>* reader, ::google::protobuf::Empty* response);
    // 移动端请求最近的空闲车辆
    virtual ::grpc::Status GetOneAvailableCar(::grpc::ServerContext* context, const ::routing_service::Point* request, ::routing_service::CarInfo* response);
    // 移动端以车辆id请求其信息
    virtual ::grpc::Status GetCarInfoById(::grpc::ServerContext* context, const ::google::protobuf::StringValue* request, ::routing_service::CarInfo* response);
    // 从移动端获取终点，计算任务点（不能太远），返回规划结果（TODO: 待商榷）
    virtual ::grpc::Status SendTaskPoint(::grpc::ServerContext* context, const ::routing_service::TaskRequest* request, ::routing_service::RoadPoints* response);
    // 车辆等待下一个任务点
    virtual ::grpc::Status WaitForTaskPoint(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::routing_service::TaskPoint* response);
    // 结束任务
    virtual ::grpc::Status FinishTask(::grpc::ServerContext* context, const ::google::protobuf::StringValue* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCarInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCarInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateCarInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCarInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routing_service::CarInfo>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCarInfo(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::google::protobuf::Empty, ::routing_service::CarInfo>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOneAvailableCar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOneAvailableCar() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOneAvailableCar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneAvailableCar(::grpc::ServerContext* /*context*/, const ::routing_service::Point* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneAvailableCar(::grpc::ServerContext* context, ::routing_service::Point* request, ::grpc::ServerAsyncResponseWriter< ::routing_service::CarInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCarInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCarInfoById() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCarInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCarInfoById(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCarInfoById(::grpc::ServerContext* context, ::google::protobuf::StringValue* request, ::grpc::ServerAsyncResponseWriter< ::routing_service::CarInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendTaskPoint() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTaskPoint(::grpc::ServerContext* /*context*/, const ::routing_service::TaskRequest* /*request*/, ::routing_service::RoadPoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTaskPoint(::grpc::ServerContext* context, ::routing_service::TaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::routing_service::RoadPoints>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WaitForTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WaitForTaskPoint() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_WaitForTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForTaskPoint(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::routing_service::TaskPoint* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWaitForTaskPoint(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::routing_service::TaskPoint>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinishTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FinishTask() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_FinishTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishTask(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishTask(::grpc::ServerContext* context, ::google::protobuf::StringValue* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateCarInfo<WithAsyncMethod_GetOneAvailableCar<WithAsyncMethod_GetCarInfoById<WithAsyncMethod_SendTaskPoint<WithAsyncMethod_WaitForTaskPoint<WithAsyncMethod_FinishTask<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateCarInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateCarInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::routing_service::CarInfo, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::google::protobuf::Empty* response) { return this->UpdateCarInfo(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_UpdateCarInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCarInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routing_service::CarInfo>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::routing_service::CarInfo>* UpdateCarInfo(
      ::grpc::CallbackServerContext* /*context*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::routing_service::CarInfo>* UpdateCarInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOneAvailableCar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOneAvailableCar() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::routing_service::Point, ::routing_service::CarInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routing_service::Point* request, ::routing_service::CarInfo* response) { return this->GetOneAvailableCar(context, request, response); }));}
    void SetMessageAllocatorFor_GetOneAvailableCar(
        ::grpc::experimental::MessageAllocator< ::routing_service::Point, ::routing_service::CarInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::routing_service::Point, ::routing_service::CarInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOneAvailableCar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneAvailableCar(::grpc::ServerContext* /*context*/, const ::routing_service::Point* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOneAvailableCar(
      ::grpc::CallbackServerContext* /*context*/, const ::routing_service::Point* /*request*/, ::routing_service::CarInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOneAvailableCar(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routing_service::Point* /*request*/, ::routing_service::CarInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCarInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCarInfoById() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::StringValue, ::routing_service::CarInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::StringValue* request, ::routing_service::CarInfo* response) { return this->GetCarInfoById(context, request, response); }));}
    void SetMessageAllocatorFor_GetCarInfoById(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::StringValue, ::routing_service::CarInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::StringValue, ::routing_service::CarInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCarInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCarInfoById(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCarInfoById(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::routing_service::CarInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCarInfoById(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::routing_service::CarInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendTaskPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::routing_service::TaskRequest, ::routing_service::RoadPoints>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routing_service::TaskRequest* request, ::routing_service::RoadPoints* response) { return this->SendTaskPoint(context, request, response); }));}
    void SetMessageAllocatorFor_SendTaskPoint(
        ::grpc::experimental::MessageAllocator< ::routing_service::TaskRequest, ::routing_service::RoadPoints>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::routing_service::TaskRequest, ::routing_service::RoadPoints>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTaskPoint(::grpc::ServerContext* /*context*/, const ::routing_service::TaskRequest* /*request*/, ::routing_service::RoadPoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendTaskPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::routing_service::TaskRequest* /*request*/, ::routing_service::RoadPoints* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendTaskPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routing_service::TaskRequest* /*request*/, ::routing_service::RoadPoints* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WaitForTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WaitForTaskPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::routing_service::TaskPoint>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::routing_service::TaskPoint* response) { return this->WaitForTaskPoint(context, request, response); }));}
    void SetMessageAllocatorFor_WaitForTaskPoint(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::routing_service::TaskPoint>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::routing_service::TaskPoint>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_WaitForTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForTaskPoint(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::routing_service::TaskPoint* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WaitForTaskPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::routing_service::TaskPoint* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WaitForTaskPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::routing_service::TaskPoint* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FinishTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FinishTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::StringValue, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::StringValue* request, ::google::protobuf::Empty* response) { return this->FinishTask(context, request, response); }));}
    void SetMessageAllocatorFor_FinishTask(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::StringValue, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::StringValue, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FinishTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishTask(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FinishTask(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FinishTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_UpdateCarInfo<ExperimentalWithCallbackMethod_GetOneAvailableCar<ExperimentalWithCallbackMethod_GetCarInfoById<ExperimentalWithCallbackMethod_SendTaskPoint<ExperimentalWithCallbackMethod_WaitForTaskPoint<ExperimentalWithCallbackMethod_FinishTask<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_UpdateCarInfo<ExperimentalWithCallbackMethod_GetOneAvailableCar<ExperimentalWithCallbackMethod_GetCarInfoById<ExperimentalWithCallbackMethod_SendTaskPoint<ExperimentalWithCallbackMethod_WaitForTaskPoint<ExperimentalWithCallbackMethod_FinishTask<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpdateCarInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCarInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateCarInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCarInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routing_service::CarInfo>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOneAvailableCar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOneAvailableCar() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOneAvailableCar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneAvailableCar(::grpc::ServerContext* /*context*/, const ::routing_service::Point* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCarInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCarInfoById() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCarInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCarInfoById(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendTaskPoint() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTaskPoint(::grpc::ServerContext* /*context*/, const ::routing_service::TaskRequest* /*request*/, ::routing_service::RoadPoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WaitForTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WaitForTaskPoint() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_WaitForTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForTaskPoint(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::routing_service::TaskPoint* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinishTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FinishTask() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_FinishTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishTask(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCarInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCarInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpdateCarInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCarInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routing_service::CarInfo>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCarInfo(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOneAvailableCar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOneAvailableCar() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOneAvailableCar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneAvailableCar(::grpc::ServerContext* /*context*/, const ::routing_service::Point* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneAvailableCar(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCarInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCarInfoById() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCarInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCarInfoById(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCarInfoById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendTaskPoint() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTaskPoint(::grpc::ServerContext* /*context*/, const ::routing_service::TaskRequest* /*request*/, ::routing_service::RoadPoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTaskPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WaitForTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WaitForTaskPoint() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_WaitForTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForTaskPoint(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::routing_service::TaskPoint* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWaitForTaskPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FinishTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FinishTask() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_FinishTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishTask(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateCarInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateCarInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->UpdateCarInfo(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateCarInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCarInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routing_service::CarInfo>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UpdateCarInfo(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* UpdateCarInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOneAvailableCar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOneAvailableCar() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOneAvailableCar(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOneAvailableCar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneAvailableCar(::grpc::ServerContext* /*context*/, const ::routing_service::Point* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOneAvailableCar(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOneAvailableCar(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCarInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCarInfoById() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCarInfoById(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCarInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCarInfoById(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCarInfoById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCarInfoById(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendTaskPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendTaskPoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTaskPoint(::grpc::ServerContext* /*context*/, const ::routing_service::TaskRequest* /*request*/, ::routing_service::RoadPoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendTaskPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendTaskPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WaitForTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WaitForTaskPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WaitForTaskPoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_WaitForTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForTaskPoint(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::routing_service::TaskPoint* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WaitForTaskPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WaitForTaskPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FinishTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FinishTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FinishTask(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FinishTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishTask(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FinishTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FinishTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOneAvailableCar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOneAvailableCar() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::routing_service::Point, ::routing_service::CarInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::routing_service::Point, ::routing_service::CarInfo>* streamer) {
                       return this->StreamedGetOneAvailableCar(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOneAvailableCar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOneAvailableCar(::grpc::ServerContext* /*context*/, const ::routing_service::Point* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOneAvailableCar(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routing_service::Point,::routing_service::CarInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCarInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCarInfoById() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::StringValue, ::routing_service::CarInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::StringValue, ::routing_service::CarInfo>* streamer) {
                       return this->StreamedGetCarInfoById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCarInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCarInfoById(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::routing_service::CarInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCarInfoById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::StringValue,::routing_service::CarInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendTaskPoint() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::routing_service::TaskRequest, ::routing_service::RoadPoints>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::routing_service::TaskRequest, ::routing_service::RoadPoints>* streamer) {
                       return this->StreamedSendTaskPoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendTaskPoint(::grpc::ServerContext* /*context*/, const ::routing_service::TaskRequest* /*request*/, ::routing_service::RoadPoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendTaskPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routing_service::TaskRequest,::routing_service::RoadPoints>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WaitForTaskPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WaitForTaskPoint() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::routing_service::TaskPoint>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::routing_service::TaskPoint>* streamer) {
                       return this->StreamedWaitForTaskPoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WaitForTaskPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WaitForTaskPoint(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::routing_service::TaskPoint* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWaitForTaskPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::routing_service::TaskPoint>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinishTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FinishTask() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::StringValue, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::StringValue, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedFinishTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FinishTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinishTask(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinishTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::StringValue,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetOneAvailableCar<WithStreamedUnaryMethod_GetCarInfoById<WithStreamedUnaryMethod_SendTaskPoint<WithStreamedUnaryMethod_WaitForTaskPoint<WithStreamedUnaryMethod_FinishTask<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetOneAvailableCar<WithStreamedUnaryMethod_GetCarInfoById<WithStreamedUnaryMethod_SendTaskPoint<WithStreamedUnaryMethod_WaitForTaskPoint<WithStreamedUnaryMethod_FinishTask<Service > > > > > StreamedService;
};

}  // namespace routing_service


#endif  // GRPC_routing_5fservice_2eproto__INCLUDED
