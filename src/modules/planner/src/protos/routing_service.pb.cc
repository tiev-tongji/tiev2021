// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routing_service.proto

#include "routing_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_routing_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefRoadPoint_routing_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_routing_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskPoints_TaskPoint_routing_5fservice_2eproto;
namespace routing_service {
class TaskPoints_TaskPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskPoints_TaskPoint> _instance;
} _TaskPoints_TaskPoint_default_instance_;
class TaskPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskPoints> _instance;
} _TaskPoints_default_instance_;
class RefRoadPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefRoadPoint> _instance;
} _RefRoadPoint_default_instance_;
class RefRoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefRoad> _instance;
} _RefRoad_default_instance_;
}  // namespace routing_service
static void InitDefaultsscc_info_RefRoad_routing_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routing_service::_RefRoad_default_instance_;
    new (ptr) ::routing_service::RefRoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefRoad_routing_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RefRoad_routing_5fservice_2eproto}, {
      &scc_info_RefRoadPoint_routing_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_RefRoadPoint_routing_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routing_service::_RefRoadPoint_default_instance_;
    new (ptr) ::routing_service::RefRoadPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefRoadPoint_routing_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RefRoadPoint_routing_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_TaskPoints_routing_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routing_service::_TaskPoints_default_instance_;
    new (ptr) ::routing_service::TaskPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskPoints_routing_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskPoints_routing_5fservice_2eproto}, {
      &scc_info_TaskPoints_TaskPoint_routing_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_TaskPoints_TaskPoint_routing_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routing_service::_TaskPoints_TaskPoint_default_instance_;
    new (ptr) ::routing_service::TaskPoints_TaskPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskPoints_TaskPoint_routing_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskPoints_TaskPoint_routing_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_routing_5fservice_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_routing_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_routing_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_routing_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routing_service::TaskPoints_TaskPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routing_service::TaskPoints_TaskPoint, lon_),
  PROTOBUF_FIELD_OFFSET(::routing_service::TaskPoints_TaskPoint, lat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routing_service::TaskPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routing_service::TaskPoints, blocked_),
  PROTOBUF_FIELD_OFFSET(::routing_service::TaskPoints, task_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, id_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, lon_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, lat_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, utmx_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, utmy_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, heading_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, curv_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, mode_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, speed_mode_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, event_mode_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, opposite_side_mode_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, lane_num_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, lane_seq_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoadPoint, lane_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoad, time_cost_),
  PROTOBUF_FIELD_OFFSET(::routing_service::RefRoad, point_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::routing_service::TaskPoints_TaskPoint)},
  { 7, -1, sizeof(::routing_service::TaskPoints)},
  { 14, -1, sizeof(::routing_service::RefRoadPoint)},
  { 33, -1, sizeof(::routing_service::RefRoad)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routing_service::_TaskPoints_TaskPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routing_service::_TaskPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routing_service::_RefRoadPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routing_service::_RefRoad_default_instance_),
};

const char descriptor_table_protodef_routing_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025routing_service.proto\022\017routing_service"
  "\"\177\n\nTaskPoints\022\017\n\007blocked\030\001 \001(\010\0229\n\ntask_"
  "point\030\002 \003(\0132%.routing_service.TaskPoints"
  ".TaskPoint\032%\n\tTaskPoint\022\013\n\003lon\030\001 \001(\001\022\013\n\003"
  "lat\030\002 \001(\001\"\371\001\n\014RefRoadPoint\022\n\n\002id\030\001 \001(\t\022\013"
  "\n\003lon\030\002 \001(\t\022\013\n\003lat\030\003 \001(\t\022\014\n\004utmx\030\004 \001(\t\022\014"
  "\n\004utmy\030\005 \001(\t\022\017\n\007heading\030\006 \001(\t\022\014\n\004curv\030\007 "
  "\001(\t\022\014\n\004mode\030\010 \001(\t\022\022\n\nspeed_mode\030\t \001(\t\022\022\n"
  "\nevent_mode\030\n \001(\t\022\032\n\022opposite_side_mode\030"
  "\013 \001(\t\022\020\n\010lane_num\030\014 \001(\t\022\020\n\010lane_seq\030\r \001("
  "\t\022\022\n\nlane_width\030\016 \001(\t\"J\n\007RefRoad\022\021\n\ttime"
  "_cost\030\001 \001(\005\022,\n\005point\030\002 \003(\0132\035.routing_ser"
  "vice.RefRoadPoint2^\n\016RoutingService\022L\n\021F"
  "indReferenceRoad\022\033.routing_service.TaskP"
  "oints\032\030.routing_service.RefRoad\"\000b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_routing_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_routing_5fservice_2eproto_sccs[4] = {
  &scc_info_RefRoad_routing_5fservice_2eproto.base,
  &scc_info_RefRoadPoint_routing_5fservice_2eproto.base,
  &scc_info_TaskPoints_routing_5fservice_2eproto.base,
  &scc_info_TaskPoints_TaskPoint_routing_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_routing_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_routing_5fservice_2eproto = {
  false, false, descriptor_table_protodef_routing_5fservice_2eproto, "routing_service.proto", 601,
  &descriptor_table_routing_5fservice_2eproto_once, descriptor_table_routing_5fservice_2eproto_sccs, descriptor_table_routing_5fservice_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_routing_5fservice_2eproto::offsets,
  file_level_metadata_routing_5fservice_2eproto, 4, file_level_enum_descriptors_routing_5fservice_2eproto, file_level_service_descriptors_routing_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_routing_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_routing_5fservice_2eproto)), true);
namespace routing_service {

// ===================================================================

class TaskPoints_TaskPoint::_Internal {
 public:
};

TaskPoints_TaskPoint::TaskPoints_TaskPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:routing_service.TaskPoints.TaskPoint)
}
TaskPoints_TaskPoint::TaskPoints_TaskPoint(const TaskPoints_TaskPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lon_, &from.lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:routing_service.TaskPoints.TaskPoint)
}

void TaskPoints_TaskPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
}

TaskPoints_TaskPoint::~TaskPoints_TaskPoint() {
  // @@protoc_insertion_point(destructor:routing_service.TaskPoints.TaskPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskPoints_TaskPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskPoints_TaskPoint::ArenaDtor(void* object) {
  TaskPoints_TaskPoint* _this = reinterpret_cast< TaskPoints_TaskPoint* >(object);
  (void)_this;
}
void TaskPoints_TaskPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskPoints_TaskPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskPoints_TaskPoint& TaskPoints_TaskPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskPoints_TaskPoint_routing_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TaskPoints_TaskPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:routing_service.TaskPoints.TaskPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskPoints_TaskPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskPoints_TaskPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routing_service.TaskPoints.TaskPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lon = 1;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lon(), target);
  }

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routing_service.TaskPoints.TaskPoint)
  return target;
}

size_t TaskPoints_TaskPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routing_service.TaskPoints.TaskPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lon = 1;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskPoints_TaskPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routing_service.TaskPoints.TaskPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskPoints_TaskPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskPoints_TaskPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routing_service.TaskPoints.TaskPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routing_service.TaskPoints.TaskPoint)
    MergeFrom(*source);
  }
}

void TaskPoints_TaskPoint::MergeFrom(const TaskPoints_TaskPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routing_service.TaskPoints.TaskPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
}

void TaskPoints_TaskPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routing_service.TaskPoints.TaskPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskPoints_TaskPoint::CopyFrom(const TaskPoints_TaskPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routing_service.TaskPoints.TaskPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPoints_TaskPoint::IsInitialized() const {
  return true;
}

void TaskPoints_TaskPoint::InternalSwap(TaskPoints_TaskPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskPoints_TaskPoint, lat_)
      + sizeof(TaskPoints_TaskPoint::lat_)
      - PROTOBUF_FIELD_OFFSET(TaskPoints_TaskPoint, lon_)>(
          reinterpret_cast<char*>(&lon_),
          reinterpret_cast<char*>(&other->lon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskPoints_TaskPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskPoints::_Internal {
 public:
};

TaskPoints::TaskPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:routing_service.TaskPoints)
}
TaskPoints::TaskPoints(const TaskPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_point_(from.task_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blocked_ = from.blocked_;
  // @@protoc_insertion_point(copy_constructor:routing_service.TaskPoints)
}

void TaskPoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskPoints_routing_5fservice_2eproto.base);
  blocked_ = false;
}

TaskPoints::~TaskPoints() {
  // @@protoc_insertion_point(destructor:routing_service.TaskPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskPoints::ArenaDtor(void* object) {
  TaskPoints* _this = reinterpret_cast< TaskPoints* >(object);
  (void)_this;
}
void TaskPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskPoints& TaskPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskPoints_routing_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TaskPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:routing_service.TaskPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_point_.Clear();
  blocked_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool blocked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .routing_service.TaskPoints.TaskPoint task_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routing_service.TaskPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool blocked = 1;
  if (this->blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_blocked(), target);
  }

  // repeated .routing_service.TaskPoints.TaskPoint task_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_task_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routing_service.TaskPoints)
  return target;
}

size_t TaskPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routing_service.TaskPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .routing_service.TaskPoints.TaskPoint task_point = 2;
  total_size += 1UL * this->_internal_task_point_size();
  for (const auto& msg : this->task_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool blocked = 1;
  if (this->blocked() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routing_service.TaskPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routing_service.TaskPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routing_service.TaskPoints)
    MergeFrom(*source);
  }
}

void TaskPoints::MergeFrom(const TaskPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routing_service.TaskPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_point_.MergeFrom(from.task_point_);
  if (from.blocked() != 0) {
    _internal_set_blocked(from._internal_blocked());
  }
}

void TaskPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routing_service.TaskPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskPoints::CopyFrom(const TaskPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routing_service.TaskPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPoints::IsInitialized() const {
  return true;
}

void TaskPoints::InternalSwap(TaskPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_point_.InternalSwap(&other->task_point_);
  swap(blocked_, other->blocked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RefRoadPoint::_Internal {
 public:
};

RefRoadPoint::RefRoadPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:routing_service.RefRoadPoint)
}
RefRoadPoint::RefRoadPoint(const RefRoadPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  lon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lon().empty()) {
    lon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lon(), 
      GetArena());
  }
  lat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lat().empty()) {
    lat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lat(), 
      GetArena());
  }
  utmx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_utmx().empty()) {
    utmx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_utmx(), 
      GetArena());
  }
  utmy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_utmy().empty()) {
    utmy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_utmy(), 
      GetArena());
  }
  heading_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_heading().empty()) {
    heading_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_heading(), 
      GetArena());
  }
  curv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_curv().empty()) {
    curv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_curv(), 
      GetArena());
  }
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mode(), 
      GetArena());
  }
  speed_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_speed_mode().empty()) {
    speed_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_speed_mode(), 
      GetArena());
  }
  event_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_mode().empty()) {
    event_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_mode(), 
      GetArena());
  }
  opposite_side_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opposite_side_mode().empty()) {
    opposite_side_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opposite_side_mode(), 
      GetArena());
  }
  lane_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lane_num().empty()) {
    lane_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_num(), 
      GetArena());
  }
  lane_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lane_seq().empty()) {
    lane_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_seq(), 
      GetArena());
  }
  lane_width_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lane_width().empty()) {
    lane_width_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_width(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:routing_service.RefRoadPoint)
}

void RefRoadPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefRoadPoint_routing_5fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  utmx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  utmy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heading_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  speed_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opposite_side_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_width_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RefRoadPoint::~RefRoadPoint() {
  // @@protoc_insertion_point(destructor:routing_service.RefRoadPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefRoadPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  utmx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  utmy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heading_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  speed_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opposite_side_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_seq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_width_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RefRoadPoint::ArenaDtor(void* object) {
  RefRoadPoint* _this = reinterpret_cast< RefRoadPoint* >(object);
  (void)_this;
}
void RefRoadPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefRoadPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefRoadPoint& RefRoadPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefRoadPoint_routing_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RefRoadPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:routing_service.RefRoadPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  lon_.ClearToEmpty();
  lat_.ClearToEmpty();
  utmx_.ClearToEmpty();
  utmy_.ClearToEmpty();
  heading_.ClearToEmpty();
  curv_.ClearToEmpty();
  mode_.ClearToEmpty();
  speed_mode_.ClearToEmpty();
  event_mode_.ClearToEmpty();
  opposite_side_mode_.ClearToEmpty();
  lane_num_.ClearToEmpty();
  lane_seq_.ClearToEmpty();
  lane_width_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefRoadPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.lon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.lat"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string utmx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_utmx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.utmx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string utmy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_utmy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.utmy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_heading();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.heading"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string curv = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_curv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.curv"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string speed_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_speed_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.speed_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string event_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_event_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.event_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string opposite_side_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_opposite_side_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.opposite_side_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lane_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_lane_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.lane_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lane_seq = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_lane_seq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.lane_seq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lane_width = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_lane_width();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routing_service.RefRoadPoint.lane_width"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefRoadPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routing_service.RefRoadPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string lon = 2;
  if (this->lon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lon().data(), static_cast<int>(this->_internal_lon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.lon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lon(), target);
  }

  // string lat = 3;
  if (this->lat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lat().data(), static_cast<int>(this->_internal_lat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.lat");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lat(), target);
  }

  // string utmx = 4;
  if (this->utmx().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utmx().data(), static_cast<int>(this->_internal_utmx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.utmx");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_utmx(), target);
  }

  // string utmy = 5;
  if (this->utmy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utmy().data(), static_cast<int>(this->_internal_utmy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.utmy");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_utmy(), target);
  }

  // string heading = 6;
  if (this->heading().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_heading().data(), static_cast<int>(this->_internal_heading().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.heading");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_heading(), target);
  }

  // string curv = 7;
  if (this->curv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_curv().data(), static_cast<int>(this->_internal_curv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.curv");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_curv(), target);
  }

  // string mode = 8;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.mode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mode(), target);
  }

  // string speed_mode = 9;
  if (this->speed_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_speed_mode().data(), static_cast<int>(this->_internal_speed_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.speed_mode");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_speed_mode(), target);
  }

  // string event_mode = 10;
  if (this->event_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_mode().data(), static_cast<int>(this->_internal_event_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.event_mode");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_event_mode(), target);
  }

  // string opposite_side_mode = 11;
  if (this->opposite_side_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opposite_side_mode().data(), static_cast<int>(this->_internal_opposite_side_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.opposite_side_mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_opposite_side_mode(), target);
  }

  // string lane_num = 12;
  if (this->lane_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lane_num().data(), static_cast<int>(this->_internal_lane_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.lane_num");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_lane_num(), target);
  }

  // string lane_seq = 13;
  if (this->lane_seq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lane_seq().data(), static_cast<int>(this->_internal_lane_seq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.lane_seq");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_lane_seq(), target);
  }

  // string lane_width = 14;
  if (this->lane_width().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lane_width().data(), static_cast<int>(this->_internal_lane_width().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routing_service.RefRoadPoint.lane_width");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_lane_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routing_service.RefRoadPoint)
  return target;
}

size_t RefRoadPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routing_service.RefRoadPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string lon = 2;
  if (this->lon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lon());
  }

  // string lat = 3;
  if (this->lat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lat());
  }

  // string utmx = 4;
  if (this->utmx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utmx());
  }

  // string utmy = 5;
  if (this->utmy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utmy());
  }

  // string heading = 6;
  if (this->heading().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heading());
  }

  // string curv = 7;
  if (this->curv().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_curv());
  }

  // string mode = 8;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // string speed_mode = 9;
  if (this->speed_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_speed_mode());
  }

  // string event_mode = 10;
  if (this->event_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_mode());
  }

  // string opposite_side_mode = 11;
  if (this->opposite_side_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opposite_side_mode());
  }

  // string lane_num = 12;
  if (this->lane_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lane_num());
  }

  // string lane_seq = 13;
  if (this->lane_seq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lane_seq());
  }

  // string lane_width = 14;
  if (this->lane_width().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lane_width());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefRoadPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routing_service.RefRoadPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RefRoadPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefRoadPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routing_service.RefRoadPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routing_service.RefRoadPoint)
    MergeFrom(*source);
  }
}

void RefRoadPoint::MergeFrom(const RefRoadPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routing_service.RefRoadPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.lon().size() > 0) {
    _internal_set_lon(from._internal_lon());
  }
  if (from.lat().size() > 0) {
    _internal_set_lat(from._internal_lat());
  }
  if (from.utmx().size() > 0) {
    _internal_set_utmx(from._internal_utmx());
  }
  if (from.utmy().size() > 0) {
    _internal_set_utmy(from._internal_utmy());
  }
  if (from.heading().size() > 0) {
    _internal_set_heading(from._internal_heading());
  }
  if (from.curv().size() > 0) {
    _internal_set_curv(from._internal_curv());
  }
  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.speed_mode().size() > 0) {
    _internal_set_speed_mode(from._internal_speed_mode());
  }
  if (from.event_mode().size() > 0) {
    _internal_set_event_mode(from._internal_event_mode());
  }
  if (from.opposite_side_mode().size() > 0) {
    _internal_set_opposite_side_mode(from._internal_opposite_side_mode());
  }
  if (from.lane_num().size() > 0) {
    _internal_set_lane_num(from._internal_lane_num());
  }
  if (from.lane_seq().size() > 0) {
    _internal_set_lane_seq(from._internal_lane_seq());
  }
  if (from.lane_width().size() > 0) {
    _internal_set_lane_width(from._internal_lane_width());
  }
}

void RefRoadPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routing_service.RefRoadPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefRoadPoint::CopyFrom(const RefRoadPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routing_service.RefRoadPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefRoadPoint::IsInitialized() const {
  return true;
}

void RefRoadPoint::InternalSwap(RefRoadPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lon_.Swap(&other->lon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lat_.Swap(&other->lat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  utmx_.Swap(&other->utmx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  utmy_.Swap(&other->utmy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heading_.Swap(&other->heading_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  curv_.Swap(&other->curv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  speed_mode_.Swap(&other->speed_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  event_mode_.Swap(&other->event_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opposite_side_mode_.Swap(&other->opposite_side_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lane_num_.Swap(&other->lane_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lane_seq_.Swap(&other->lane_seq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lane_width_.Swap(&other->lane_width_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RefRoadPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RefRoad::_Internal {
 public:
};

RefRoad::RefRoad(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:routing_service.RefRoad)
}
RefRoad::RefRoad(const RefRoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_(from.point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_cost_ = from.time_cost_;
  // @@protoc_insertion_point(copy_constructor:routing_service.RefRoad)
}

void RefRoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefRoad_routing_5fservice_2eproto.base);
  time_cost_ = 0;
}

RefRoad::~RefRoad() {
  // @@protoc_insertion_point(destructor:routing_service.RefRoad)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefRoad::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RefRoad::ArenaDtor(void* object) {
  RefRoad* _this = reinterpret_cast< RefRoad* >(object);
  (void)_this;
}
void RefRoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefRoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefRoad& RefRoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefRoad_routing_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RefRoad::Clear() {
// @@protoc_insertion_point(message_clear_start:routing_service.RefRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  time_cost_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefRoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 time_cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .routing_service.RefRoadPoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefRoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routing_service.RefRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time_cost = 1;
  if (this->time_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_cost(), target);
  }

  // repeated .routing_service.RefRoadPoint point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routing_service.RefRoad)
  return target;
}

size_t RefRoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routing_service.RefRoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .routing_service.RefRoadPoint point = 2;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 time_cost = 1;
  if (this->time_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefRoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routing_service.RefRoad)
  GOOGLE_DCHECK_NE(&from, this);
  const RefRoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefRoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routing_service.RefRoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routing_service.RefRoad)
    MergeFrom(*source);
  }
}

void RefRoad::MergeFrom(const RefRoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routing_service.RefRoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  if (from.time_cost() != 0) {
    _internal_set_time_cost(from._internal_time_cost());
  }
}

void RefRoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routing_service.RefRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefRoad::CopyFrom(const RefRoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routing_service.RefRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefRoad::IsInitialized() const {
  return true;
}

void RefRoad::InternalSwap(RefRoad* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  point_.InternalSwap(&other->point_);
  swap(time_cost_, other->time_cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefRoad::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace routing_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::routing_service::TaskPoints_TaskPoint* Arena::CreateMaybeMessage< ::routing_service::TaskPoints_TaskPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::routing_service::TaskPoints_TaskPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::routing_service::TaskPoints* Arena::CreateMaybeMessage< ::routing_service::TaskPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::routing_service::TaskPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::routing_service::RefRoadPoint* Arena::CreateMaybeMessage< ::routing_service::RefRoadPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::routing_service::RefRoadPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::routing_service::RefRoad* Arena::CreateMaybeMessage< ::routing_service::RefRoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::routing_service::RefRoad >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
