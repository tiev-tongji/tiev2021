// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routing_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_routing_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_routing_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_routing_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_routing_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_routing_5fservice_2eproto;
namespace routing_service {
class CarInfo;
class CarInfoDefaultTypeInternal;
extern CarInfoDefaultTypeInternal _CarInfo_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RefRoad;
class RefRoadDefaultTypeInternal;
extern RefRoadDefaultTypeInternal _RefRoad_default_instance_;
class RefRoadPoint;
class RefRoadPointDefaultTypeInternal;
extern RefRoadPointDefaultTypeInternal _RefRoadPoint_default_instance_;
class RoadPoints;
class RoadPointsDefaultTypeInternal;
extern RoadPointsDefaultTypeInternal _RoadPoints_default_instance_;
class TaskPoint;
class TaskPointDefaultTypeInternal;
extern TaskPointDefaultTypeInternal _TaskPoint_default_instance_;
class TaskPoints;
class TaskPointsDefaultTypeInternal;
extern TaskPointsDefaultTypeInternal _TaskPoints_default_instance_;
class TaskRequest;
class TaskRequestDefaultTypeInternal;
extern TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
}  // namespace routing_service
PROTOBUF_NAMESPACE_OPEN
template<> ::routing_service::CarInfo* Arena::CreateMaybeMessage<::routing_service::CarInfo>(Arena*);
template<> ::routing_service::Point* Arena::CreateMaybeMessage<::routing_service::Point>(Arena*);
template<> ::routing_service::RefRoad* Arena::CreateMaybeMessage<::routing_service::RefRoad>(Arena*);
template<> ::routing_service::RefRoadPoint* Arena::CreateMaybeMessage<::routing_service::RefRoadPoint>(Arena*);
template<> ::routing_service::RoadPoints* Arena::CreateMaybeMessage<::routing_service::RoadPoints>(Arena*);
template<> ::routing_service::TaskPoint* Arena::CreateMaybeMessage<::routing_service::TaskPoint>(Arena*);
template<> ::routing_service::TaskPoints* Arena::CreateMaybeMessage<::routing_service::TaskPoints>(Arena*);
template<> ::routing_service::TaskRequest* Arena::CreateMaybeMessage<::routing_service::TaskRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace routing_service {

// ===================================================================

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonFieldNumber = 1,
    kLatFieldNumber = 2,
  };
  // double lon = 1;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double lat = 2;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lon_;
  double lat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskPoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.TaskPoints) */ {
 public:
  inline TaskPoints() : TaskPoints(nullptr) {}
  virtual ~TaskPoints();

  TaskPoints(const TaskPoints& from);
  TaskPoints(TaskPoints&& from) noexcept
    : TaskPoints() {
    *this = ::std::move(from);
  }

  inline TaskPoints& operator=(const TaskPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskPoints& operator=(TaskPoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskPoints& default_instance();

  static inline const TaskPoints* internal_default_instance() {
    return reinterpret_cast<const TaskPoints*>(
               &_TaskPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskPoints& a, TaskPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskPoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskPoints* New() const final {
    return CreateMaybeMessage<TaskPoints>(nullptr);
  }

  TaskPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskPoints& from);
  void MergeFrom(const TaskPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.TaskPoints";
  }
  protected:
  explicit TaskPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskPointFieldNumber = 2,
    kMapFieldNumber = 3,
    kBlockedFieldNumber = 1,
  };
  // repeated .routing_service.Point task_point = 2;
  int task_point_size() const;
  private:
  int _internal_task_point_size() const;
  public:
  void clear_task_point();
  ::routing_service::Point* mutable_task_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point >*
      mutable_task_point();
  private:
  const ::routing_service::Point& _internal_task_point(int index) const;
  ::routing_service::Point* _internal_add_task_point();
  public:
  const ::routing_service::Point& task_point(int index) const;
  ::routing_service::Point* add_task_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point >&
      task_point() const;

  // string map = 3;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // bool blocked = 1;
  void clear_blocked();
  bool blocked() const;
  void set_blocked(bool value);
  private:
  bool _internal_blocked() const;
  void _internal_set_blocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.TaskPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point > task_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  bool blocked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RefRoadPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.RefRoadPoint) */ {
 public:
  inline RefRoadPoint() : RefRoadPoint(nullptr) {}
  virtual ~RefRoadPoint();

  RefRoadPoint(const RefRoadPoint& from);
  RefRoadPoint(RefRoadPoint&& from) noexcept
    : RefRoadPoint() {
    *this = ::std::move(from);
  }

  inline RefRoadPoint& operator=(const RefRoadPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefRoadPoint& operator=(RefRoadPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefRoadPoint& default_instance();

  static inline const RefRoadPoint* internal_default_instance() {
    return reinterpret_cast<const RefRoadPoint*>(
               &_RefRoadPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RefRoadPoint& a, RefRoadPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RefRoadPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefRoadPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefRoadPoint* New() const final {
    return CreateMaybeMessage<RefRoadPoint>(nullptr);
  }

  RefRoadPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefRoadPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefRoadPoint& from);
  void MergeFrom(const RefRoadPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefRoadPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.RefRoadPoint";
  }
  protected:
  explicit RefRoadPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonFieldNumber = 2,
    kLatFieldNumber = 3,
    kUtmxFieldNumber = 4,
    kIdFieldNumber = 1,
    kModeFieldNumber = 8,
    kUtmyFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kCurvFieldNumber = 7,
    kSpeedModeFieldNumber = 9,
    kEventModeFieldNumber = 10,
    kOppositeSideModeFieldNumber = 11,
    kLaneNumFieldNumber = 12,
    kLaneWidthFieldNumber = 14,
    kLaneSeqFieldNumber = 13,
  };
  // double lon = 2;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double lat = 3;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double utmx = 4;
  void clear_utmx();
  double utmx() const;
  void set_utmx(double value);
  private:
  double _internal_utmx() const;
  void _internal_set_utmx(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mode = 8;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double utmy = 5;
  void clear_utmy();
  double utmy() const;
  void set_utmy(double value);
  private:
  double _internal_utmy() const;
  void _internal_set_utmy(double value);
  public:

  // double heading = 6;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // double curv = 7;
  void clear_curv();
  double curv() const;
  void set_curv(double value);
  private:
  double _internal_curv() const;
  void _internal_set_curv(double value);
  public:

  // int32 speed_mode = 9;
  void clear_speed_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 speed_mode() const;
  void set_speed_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed_mode() const;
  void _internal_set_speed_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 event_mode = 10;
  void clear_event_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 event_mode() const;
  void set_event_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_mode() const;
  void _internal_set_event_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 opposite_side_mode = 11;
  void clear_opposite_side_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 opposite_side_mode() const;
  void set_opposite_side_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opposite_side_mode() const;
  void _internal_set_opposite_side_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lane_num = 12;
  void clear_lane_num();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_num() const;
  void set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_num() const;
  void _internal_set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double lane_width = 14;
  void clear_lane_width();
  double lane_width() const;
  void set_lane_width(double value);
  private:
  double _internal_lane_width() const;
  void _internal_set_lane_width(double value);
  public:

  // int32 lane_seq = 13;
  void clear_lane_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_seq() const;
  void set_lane_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_seq() const;
  void _internal_set_lane_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.RefRoadPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lon_;
  double lat_;
  double utmx_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  double utmy_;
  double heading_;
  double curv_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 opposite_side_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_num_;
  double lane_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RefRoad PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.RefRoad) */ {
 public:
  inline RefRoad() : RefRoad(nullptr) {}
  virtual ~RefRoad();

  RefRoad(const RefRoad& from);
  RefRoad(RefRoad&& from) noexcept
    : RefRoad() {
    *this = ::std::move(from);
  }

  inline RefRoad& operator=(const RefRoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefRoad& operator=(RefRoad&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefRoad& default_instance();

  static inline const RefRoad* internal_default_instance() {
    return reinterpret_cast<const RefRoad*>(
               &_RefRoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RefRoad& a, RefRoad& b) {
    a.Swap(&b);
  }
  inline void Swap(RefRoad* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefRoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefRoad* New() const final {
    return CreateMaybeMessage<RefRoad>(nullptr);
  }

  RefRoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefRoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefRoad& from);
  void MergeFrom(const RefRoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefRoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.RefRoad";
  }
  protected:
  explicit RefRoad(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 2,
    kTimeCostFieldNumber = 1,
  };
  // repeated .routing_service.RefRoadPoint point = 2;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::routing_service::RefRoadPoint* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint >*
      mutable_point();
  private:
  const ::routing_service::RefRoadPoint& _internal_point(int index) const;
  ::routing_service::RefRoadPoint* _internal_add_point();
  public:
  const ::routing_service::RefRoadPoint& point(int index) const;
  ::routing_service::RefRoadPoint* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint >&
      point() const;

  // int32 time_cost = 1;
  void clear_time_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 time_cost() const;
  void set_time_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_cost() const;
  void _internal_set_time_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.RefRoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint > point_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RoadPoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.RoadPoints) */ {
 public:
  inline RoadPoints() : RoadPoints(nullptr) {}
  virtual ~RoadPoints();

  RoadPoints(const RoadPoints& from);
  RoadPoints(RoadPoints&& from) noexcept
    : RoadPoints() {
    *this = ::std::move(from);
  }

  inline RoadPoints& operator=(const RoadPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadPoints& operator=(RoadPoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadPoints& default_instance();

  static inline const RoadPoints* internal_default_instance() {
    return reinterpret_cast<const RoadPoints*>(
               &_RoadPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoadPoints& a, RoadPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadPoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadPoints* New() const final {
    return CreateMaybeMessage<RoadPoints>(nullptr);
  }

  RoadPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadPoints& from);
  void MergeFrom(const RoadPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.RoadPoints";
  }
  protected:
  explicit RoadPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .routing_service.Point point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::routing_service::Point* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point >*
      mutable_point();
  private:
  const ::routing_service::Point& _internal_point(int index) const;
  ::routing_service::Point* _internal_add_point();
  public:
  const ::routing_service::Point& point(int index) const;
  ::routing_service::Point* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point >&
      point() const;

  // @@protoc_insertion_point(class_scope:routing_service.RoadPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point > point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CarInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.CarInfo) */ {
 public:
  inline CarInfo() : CarInfo(nullptr) {}
  virtual ~CarInfo();

  CarInfo(const CarInfo& from);
  CarInfo(CarInfo&& from) noexcept
    : CarInfo() {
    *this = ::std::move(from);
  }

  inline CarInfo& operator=(const CarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarInfo& operator=(CarInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarInfo& default_instance();

  static inline const CarInfo* internal_default_instance() {
    return reinterpret_cast<const CarInfo*>(
               &_CarInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CarInfo& a, CarInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CarInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CarInfo* New() const final {
    return CreateMaybeMessage<CarInfo>(nullptr);
  }

  CarInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarInfo& from);
  void MergeFrom(const CarInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.CarInfo";
  }
  protected:
  explicit CarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMapFieldNumber = 2,
    kPosFieldNumber = 3,
    kRunningFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string map = 2;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // .routing_service.Point pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::routing_service::Point& pos() const;
  ::routing_service::Point* release_pos();
  ::routing_service::Point* mutable_pos();
  void set_allocated_pos(::routing_service::Point* pos);
  private:
  const ::routing_service::Point& _internal_pos() const;
  ::routing_service::Point* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::routing_service::Point* pos);
  ::routing_service::Point* unsafe_arena_release_pos();

  // bool running = 4;
  void clear_running();
  bool running() const;
  void set_running(bool value);
  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.CarInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::routing_service::Point* pos_;
  bool running_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.TaskRequest) */ {
 public:
  inline TaskRequest() : TaskRequest(nullptr) {}
  virtual ~TaskRequest();

  TaskRequest(const TaskRequest& from);
  TaskRequest(TaskRequest&& from) noexcept
    : TaskRequest() {
    *this = ::std::move(from);
  }

  inline TaskRequest& operator=(const TaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRequest& operator=(TaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskRequest& default_instance();

  static inline const TaskRequest* internal_default_instance() {
    return reinterpret_cast<const TaskRequest*>(
               &_TaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TaskRequest& a, TaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRequest* New() const final {
    return CreateMaybeMessage<TaskRequest>(nullptr);
  }

  TaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskRequest& from);
  void MergeFrom(const TaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.TaskRequest";
  }
  protected:
  explicit TaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kMapFieldNumber = 3,
    kPointFieldNumber = 1,
    kOnOrOffFieldNumber = 4,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string map = 3;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // .routing_service.Point point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::routing_service::Point& point() const;
  ::routing_service::Point* release_point();
  ::routing_service::Point* mutable_point();
  void set_allocated_point(::routing_service::Point* point);
  private:
  const ::routing_service::Point& _internal_point() const;
  ::routing_service::Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::routing_service::Point* point);
  ::routing_service::Point* unsafe_arena_release_point();

  // bool on_or_off = 4;
  void clear_on_or_off();
  bool on_or_off() const;
  void set_on_or_off(bool value);
  private:
  bool _internal_on_or_off() const;
  void _internal_set_on_or_off(bool value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.TaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::routing_service::Point* point_;
  bool on_or_off_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.TaskPoint) */ {
 public:
  inline TaskPoint() : TaskPoint(nullptr) {}
  virtual ~TaskPoint();

  TaskPoint(const TaskPoint& from);
  TaskPoint(TaskPoint&& from) noexcept
    : TaskPoint() {
    *this = ::std::move(from);
  }

  inline TaskPoint& operator=(const TaskPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskPoint& operator=(TaskPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskPoint& default_instance();

  static inline const TaskPoint* internal_default_instance() {
    return reinterpret_cast<const TaskPoint*>(
               &_TaskPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TaskPoint& a, TaskPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskPoint* New() const final {
    return CreateMaybeMessage<TaskPoint>(nullptr);
  }

  TaskPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskPoint& from);
  void MergeFrom(const TaskPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.TaskPoint";
  }
  protected:
  explicit TaskPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonFieldNumber = 1,
    kLatFieldNumber = 2,
    kUtmxFieldNumber = 3,
    kUtmyFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kOnOrOffFieldNumber = 6,
  };
  // double lon = 1;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double lat = 2;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double utmx = 3;
  void clear_utmx();
  double utmx() const;
  void set_utmx(double value);
  private:
  double _internal_utmx() const;
  void _internal_set_utmx(double value);
  public:

  // double utmy = 4;
  void clear_utmy();
  double utmy() const;
  void set_utmy(double value);
  private:
  double _internal_utmy() const;
  void _internal_set_utmy(double value);
  public:

  // double heading = 5;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // bool on_or_off = 6;
  void clear_on_or_off();
  bool on_or_off() const;
  void set_on_or_off(bool value);
  private:
  bool _internal_on_or_off() const;
  void _internal_set_on_or_off(bool value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.TaskPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lon_;
  double lat_;
  double utmx_;
  double utmy_;
  double heading_;
  bool on_or_off_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double lon = 1;
inline void Point::clear_lon() {
  lon_ = 0;
}
inline double Point::_internal_lon() const {
  return lon_;
}
inline double Point::lon() const {
  // @@protoc_insertion_point(field_get:routing_service.Point.lon)
  return _internal_lon();
}
inline void Point::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Point::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:routing_service.Point.lon)
}

// double lat = 2;
inline void Point::clear_lat() {
  lat_ = 0;
}
inline double Point::_internal_lat() const {
  return lat_;
}
inline double Point::lat() const {
  // @@protoc_insertion_point(field_get:routing_service.Point.lat)
  return _internal_lat();
}
inline void Point::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Point::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:routing_service.Point.lat)
}

// -------------------------------------------------------------------

// TaskPoints

// bool blocked = 1;
inline void TaskPoints::clear_blocked() {
  blocked_ = false;
}
inline bool TaskPoints::_internal_blocked() const {
  return blocked_;
}
inline bool TaskPoints::blocked() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoints.blocked)
  return _internal_blocked();
}
inline void TaskPoints::_internal_set_blocked(bool value) {
  
  blocked_ = value;
}
inline void TaskPoints::set_blocked(bool value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoints.blocked)
}

// repeated .routing_service.Point task_point = 2;
inline int TaskPoints::_internal_task_point_size() const {
  return task_point_.size();
}
inline int TaskPoints::task_point_size() const {
  return _internal_task_point_size();
}
inline void TaskPoints::clear_task_point() {
  task_point_.Clear();
}
inline ::routing_service::Point* TaskPoints::mutable_task_point(int index) {
  // @@protoc_insertion_point(field_mutable:routing_service.TaskPoints.task_point)
  return task_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point >*
TaskPoints::mutable_task_point() {
  // @@protoc_insertion_point(field_mutable_list:routing_service.TaskPoints.task_point)
  return &task_point_;
}
inline const ::routing_service::Point& TaskPoints::_internal_task_point(int index) const {
  return task_point_.Get(index);
}
inline const ::routing_service::Point& TaskPoints::task_point(int index) const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoints.task_point)
  return _internal_task_point(index);
}
inline ::routing_service::Point* TaskPoints::_internal_add_task_point() {
  return task_point_.Add();
}
inline ::routing_service::Point* TaskPoints::add_task_point() {
  // @@protoc_insertion_point(field_add:routing_service.TaskPoints.task_point)
  return _internal_add_task_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point >&
TaskPoints::task_point() const {
  // @@protoc_insertion_point(field_list:routing_service.TaskPoints.task_point)
  return task_point_;
}

// string map = 3;
inline void TaskPoints::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& TaskPoints::map() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoints.map)
  return _internal_map();
}
inline void TaskPoints::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoints.map)
}
inline std::string* TaskPoints::mutable_map() {
  // @@protoc_insertion_point(field_mutable:routing_service.TaskPoints.map)
  return _internal_mutable_map();
}
inline const std::string& TaskPoints::_internal_map() const {
  return map_.Get();
}
inline void TaskPoints::_internal_set_map(const std::string& value) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskPoints::set_map(std::string&& value) {
  
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.TaskPoints.map)
}
inline void TaskPoints::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.TaskPoints.map)
}
inline void TaskPoints::set_map(const char* value,
    size_t size) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.TaskPoints.map)
}
inline std::string* TaskPoints::_internal_mutable_map() {
  
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskPoints::release_map() {
  // @@protoc_insertion_point(field_release:routing_service.TaskPoints.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskPoints::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.TaskPoints.map)
}

// -------------------------------------------------------------------

// RefRoadPoint

// int32 id = 1;
inline void RefRoadPoint::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::id() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.id)
  return _internal_id();
}
inline void RefRoadPoint::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void RefRoadPoint::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.id)
}

// double lon = 2;
inline void RefRoadPoint::clear_lon() {
  lon_ = 0;
}
inline double RefRoadPoint::_internal_lon() const {
  return lon_;
}
inline double RefRoadPoint::lon() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lon)
  return _internal_lon();
}
inline void RefRoadPoint::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void RefRoadPoint::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lon)
}

// double lat = 3;
inline void RefRoadPoint::clear_lat() {
  lat_ = 0;
}
inline double RefRoadPoint::_internal_lat() const {
  return lat_;
}
inline double RefRoadPoint::lat() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lat)
  return _internal_lat();
}
inline void RefRoadPoint::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void RefRoadPoint::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lat)
}

// double utmx = 4;
inline void RefRoadPoint::clear_utmx() {
  utmx_ = 0;
}
inline double RefRoadPoint::_internal_utmx() const {
  return utmx_;
}
inline double RefRoadPoint::utmx() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.utmx)
  return _internal_utmx();
}
inline void RefRoadPoint::_internal_set_utmx(double value) {
  
  utmx_ = value;
}
inline void RefRoadPoint::set_utmx(double value) {
  _internal_set_utmx(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.utmx)
}

// double utmy = 5;
inline void RefRoadPoint::clear_utmy() {
  utmy_ = 0;
}
inline double RefRoadPoint::_internal_utmy() const {
  return utmy_;
}
inline double RefRoadPoint::utmy() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.utmy)
  return _internal_utmy();
}
inline void RefRoadPoint::_internal_set_utmy(double value) {
  
  utmy_ = value;
}
inline void RefRoadPoint::set_utmy(double value) {
  _internal_set_utmy(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.utmy)
}

// double heading = 6;
inline void RefRoadPoint::clear_heading() {
  heading_ = 0;
}
inline double RefRoadPoint::_internal_heading() const {
  return heading_;
}
inline double RefRoadPoint::heading() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.heading)
  return _internal_heading();
}
inline void RefRoadPoint::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void RefRoadPoint::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.heading)
}

// double curv = 7;
inline void RefRoadPoint::clear_curv() {
  curv_ = 0;
}
inline double RefRoadPoint::_internal_curv() const {
  return curv_;
}
inline double RefRoadPoint::curv() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.curv)
  return _internal_curv();
}
inline void RefRoadPoint::_internal_set_curv(double value) {
  
  curv_ = value;
}
inline void RefRoadPoint::set_curv(double value) {
  _internal_set_curv(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.curv)
}

// int32 mode = 8;
inline void RefRoadPoint::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::mode() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.mode)
  return _internal_mode();
}
inline void RefRoadPoint::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void RefRoadPoint::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.mode)
}

// int32 speed_mode = 9;
inline void RefRoadPoint::clear_speed_mode() {
  speed_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::_internal_speed_mode() const {
  return speed_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::speed_mode() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.speed_mode)
  return _internal_speed_mode();
}
inline void RefRoadPoint::_internal_set_speed_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_mode_ = value;
}
inline void RefRoadPoint::set_speed_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed_mode(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.speed_mode)
}

// int32 event_mode = 10;
inline void RefRoadPoint::clear_event_mode() {
  event_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::_internal_event_mode() const {
  return event_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::event_mode() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.event_mode)
  return _internal_event_mode();
}
inline void RefRoadPoint::_internal_set_event_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_mode_ = value;
}
inline void RefRoadPoint::set_event_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_mode(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.event_mode)
}

// int32 opposite_side_mode = 11;
inline void RefRoadPoint::clear_opposite_side_mode() {
  opposite_side_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::_internal_opposite_side_mode() const {
  return opposite_side_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::opposite_side_mode() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.opposite_side_mode)
  return _internal_opposite_side_mode();
}
inline void RefRoadPoint::_internal_set_opposite_side_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opposite_side_mode_ = value;
}
inline void RefRoadPoint::set_opposite_side_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opposite_side_mode(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.opposite_side_mode)
}

// int32 lane_num = 12;
inline void RefRoadPoint::clear_lane_num() {
  lane_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::_internal_lane_num() const {
  return lane_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::lane_num() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lane_num)
  return _internal_lane_num();
}
inline void RefRoadPoint::_internal_set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_num_ = value;
}
inline void RefRoadPoint::set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_num(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lane_num)
}

// int32 lane_seq = 13;
inline void RefRoadPoint::clear_lane_seq() {
  lane_seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::_internal_lane_seq() const {
  return lane_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoadPoint::lane_seq() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lane_seq)
  return _internal_lane_seq();
}
inline void RefRoadPoint::_internal_set_lane_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_seq_ = value;
}
inline void RefRoadPoint::set_lane_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_seq(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lane_seq)
}

// double lane_width = 14;
inline void RefRoadPoint::clear_lane_width() {
  lane_width_ = 0;
}
inline double RefRoadPoint::_internal_lane_width() const {
  return lane_width_;
}
inline double RefRoadPoint::lane_width() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lane_width)
  return _internal_lane_width();
}
inline void RefRoadPoint::_internal_set_lane_width(double value) {
  
  lane_width_ = value;
}
inline void RefRoadPoint::set_lane_width(double value) {
  _internal_set_lane_width(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lane_width)
}

// -------------------------------------------------------------------

// RefRoad

// int32 time_cost = 1;
inline void RefRoad::clear_time_cost() {
  time_cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoad::_internal_time_cost() const {
  return time_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoad::time_cost() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoad.time_cost)
  return _internal_time_cost();
}
inline void RefRoad::_internal_set_time_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_cost_ = value;
}
inline void RefRoad::set_time_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_cost(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoad.time_cost)
}

// repeated .routing_service.RefRoadPoint point = 2;
inline int RefRoad::_internal_point_size() const {
  return point_.size();
}
inline int RefRoad::point_size() const {
  return _internal_point_size();
}
inline void RefRoad::clear_point() {
  point_.Clear();
}
inline ::routing_service::RefRoadPoint* RefRoad::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoad.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint >*
RefRoad::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:routing_service.RefRoad.point)
  return &point_;
}
inline const ::routing_service::RefRoadPoint& RefRoad::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::routing_service::RefRoadPoint& RefRoad::point(int index) const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoad.point)
  return _internal_point(index);
}
inline ::routing_service::RefRoadPoint* RefRoad::_internal_add_point() {
  return point_.Add();
}
inline ::routing_service::RefRoadPoint* RefRoad::add_point() {
  // @@protoc_insertion_point(field_add:routing_service.RefRoad.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint >&
RefRoad::point() const {
  // @@protoc_insertion_point(field_list:routing_service.RefRoad.point)
  return point_;
}

// -------------------------------------------------------------------

// RoadPoints

// repeated .routing_service.Point point = 1;
inline int RoadPoints::_internal_point_size() const {
  return point_.size();
}
inline int RoadPoints::point_size() const {
  return _internal_point_size();
}
inline void RoadPoints::clear_point() {
  point_.Clear();
}
inline ::routing_service::Point* RoadPoints::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:routing_service.RoadPoints.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point >*
RoadPoints::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:routing_service.RoadPoints.point)
  return &point_;
}
inline const ::routing_service::Point& RoadPoints::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::routing_service::Point& RoadPoints::point(int index) const {
  // @@protoc_insertion_point(field_get:routing_service.RoadPoints.point)
  return _internal_point(index);
}
inline ::routing_service::Point* RoadPoints::_internal_add_point() {
  return point_.Add();
}
inline ::routing_service::Point* RoadPoints::add_point() {
  // @@protoc_insertion_point(field_add:routing_service.RoadPoints.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::Point >&
RoadPoints::point() const {
  // @@protoc_insertion_point(field_list:routing_service.RoadPoints.point)
  return point_;
}

// -------------------------------------------------------------------

// CarInfo

// string id = 1;
inline void CarInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CarInfo::id() const {
  // @@protoc_insertion_point(field_get:routing_service.CarInfo.id)
  return _internal_id();
}
inline void CarInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:routing_service.CarInfo.id)
}
inline std::string* CarInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:routing_service.CarInfo.id)
  return _internal_mutable_id();
}
inline const std::string& CarInfo::_internal_id() const {
  return id_.Get();
}
inline void CarInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CarInfo::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.CarInfo.id)
}
inline void CarInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.CarInfo.id)
}
inline void CarInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.CarInfo.id)
}
inline std::string* CarInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CarInfo::release_id() {
  // @@protoc_insertion_point(field_release:routing_service.CarInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CarInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.CarInfo.id)
}

// string map = 2;
inline void CarInfo::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& CarInfo::map() const {
  // @@protoc_insertion_point(field_get:routing_service.CarInfo.map)
  return _internal_map();
}
inline void CarInfo::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:routing_service.CarInfo.map)
}
inline std::string* CarInfo::mutable_map() {
  // @@protoc_insertion_point(field_mutable:routing_service.CarInfo.map)
  return _internal_mutable_map();
}
inline const std::string& CarInfo::_internal_map() const {
  return map_.Get();
}
inline void CarInfo::_internal_set_map(const std::string& value) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CarInfo::set_map(std::string&& value) {
  
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.CarInfo.map)
}
inline void CarInfo::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.CarInfo.map)
}
inline void CarInfo::set_map(const char* value,
    size_t size) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.CarInfo.map)
}
inline std::string* CarInfo::_internal_mutable_map() {
  
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CarInfo::release_map() {
  // @@protoc_insertion_point(field_release:routing_service.CarInfo.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CarInfo::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.CarInfo.map)
}

// .routing_service.Point pos = 3;
inline bool CarInfo::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool CarInfo::has_pos() const {
  return _internal_has_pos();
}
inline void CarInfo::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::routing_service::Point& CarInfo::_internal_pos() const {
  const ::routing_service::Point* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::routing_service::Point&>(
      ::routing_service::_Point_default_instance_);
}
inline const ::routing_service::Point& CarInfo::pos() const {
  // @@protoc_insertion_point(field_get:routing_service.CarInfo.pos)
  return _internal_pos();
}
inline void CarInfo::unsafe_arena_set_allocated_pos(
    ::routing_service::Point* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:routing_service.CarInfo.pos)
}
inline ::routing_service::Point* CarInfo::release_pos() {
  
  ::routing_service::Point* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::routing_service::Point* CarInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:routing_service.CarInfo.pos)
  
  ::routing_service::Point* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::routing_service::Point* CarInfo::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::routing_service::Point>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::routing_service::Point* CarInfo::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:routing_service.CarInfo.pos)
  return _internal_mutable_pos();
}
inline void CarInfo::set_allocated_pos(::routing_service::Point* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:routing_service.CarInfo.pos)
}

// bool running = 4;
inline void CarInfo::clear_running() {
  running_ = false;
}
inline bool CarInfo::_internal_running() const {
  return running_;
}
inline bool CarInfo::running() const {
  // @@protoc_insertion_point(field_get:routing_service.CarInfo.running)
  return _internal_running();
}
inline void CarInfo::_internal_set_running(bool value) {
  
  running_ = value;
}
inline void CarInfo::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:routing_service.CarInfo.running)
}

// -------------------------------------------------------------------

// TaskRequest

// .routing_service.Point point = 1;
inline bool TaskRequest::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool TaskRequest::has_point() const {
  return _internal_has_point();
}
inline void TaskRequest::clear_point() {
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::routing_service::Point& TaskRequest::_internal_point() const {
  const ::routing_service::Point* p = point_;
  return p != nullptr ? *p : reinterpret_cast<const ::routing_service::Point&>(
      ::routing_service::_Point_default_instance_);
}
inline const ::routing_service::Point& TaskRequest::point() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskRequest.point)
  return _internal_point();
}
inline void TaskRequest::unsafe_arena_set_allocated_point(
    ::routing_service::Point* point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:routing_service.TaskRequest.point)
}
inline ::routing_service::Point* TaskRequest::release_point() {
  
  ::routing_service::Point* temp = point_;
  point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::routing_service::Point* TaskRequest::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:routing_service.TaskRequest.point)
  
  ::routing_service::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::routing_service::Point* TaskRequest::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::routing_service::Point>(GetArena());
    point_ = p;
  }
  return point_;
}
inline ::routing_service::Point* TaskRequest::mutable_point() {
  // @@protoc_insertion_point(field_mutable:routing_service.TaskRequest.point)
  return _internal_mutable_point();
}
inline void TaskRequest::set_allocated_point(::routing_service::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:routing_service.TaskRequest.point)
}

// string id = 2;
inline void TaskRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TaskRequest::id() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskRequest.id)
  return _internal_id();
}
inline void TaskRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskRequest.id)
}
inline std::string* TaskRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:routing_service.TaskRequest.id)
  return _internal_mutable_id();
}
inline const std::string& TaskRequest::_internal_id() const {
  return id_.Get();
}
inline void TaskRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskRequest::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.TaskRequest.id)
}
inline void TaskRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.TaskRequest.id)
}
inline void TaskRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.TaskRequest.id)
}
inline std::string* TaskRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskRequest::release_id() {
  // @@protoc_insertion_point(field_release:routing_service.TaskRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.TaskRequest.id)
}

// string map = 3;
inline void TaskRequest::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& TaskRequest::map() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskRequest.map)
  return _internal_map();
}
inline void TaskRequest::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskRequest.map)
}
inline std::string* TaskRequest::mutable_map() {
  // @@protoc_insertion_point(field_mutable:routing_service.TaskRequest.map)
  return _internal_mutable_map();
}
inline const std::string& TaskRequest::_internal_map() const {
  return map_.Get();
}
inline void TaskRequest::_internal_set_map(const std::string& value) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskRequest::set_map(std::string&& value) {
  
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.TaskRequest.map)
}
inline void TaskRequest::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.TaskRequest.map)
}
inline void TaskRequest::set_map(const char* value,
    size_t size) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.TaskRequest.map)
}
inline std::string* TaskRequest::_internal_mutable_map() {
  
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskRequest::release_map() {
  // @@protoc_insertion_point(field_release:routing_service.TaskRequest.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.TaskRequest.map)
}

// bool on_or_off = 4;
inline void TaskRequest::clear_on_or_off() {
  on_or_off_ = false;
}
inline bool TaskRequest::_internal_on_or_off() const {
  return on_or_off_;
}
inline bool TaskRequest::on_or_off() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskRequest.on_or_off)
  return _internal_on_or_off();
}
inline void TaskRequest::_internal_set_on_or_off(bool value) {
  
  on_or_off_ = value;
}
inline void TaskRequest::set_on_or_off(bool value) {
  _internal_set_on_or_off(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskRequest.on_or_off)
}

// -------------------------------------------------------------------

// TaskPoint

// double lon = 1;
inline void TaskPoint::clear_lon() {
  lon_ = 0;
}
inline double TaskPoint::_internal_lon() const {
  return lon_;
}
inline double TaskPoint::lon() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoint.lon)
  return _internal_lon();
}
inline void TaskPoint::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void TaskPoint::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoint.lon)
}

// double lat = 2;
inline void TaskPoint::clear_lat() {
  lat_ = 0;
}
inline double TaskPoint::_internal_lat() const {
  return lat_;
}
inline double TaskPoint::lat() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoint.lat)
  return _internal_lat();
}
inline void TaskPoint::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void TaskPoint::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoint.lat)
}

// double utmx = 3;
inline void TaskPoint::clear_utmx() {
  utmx_ = 0;
}
inline double TaskPoint::_internal_utmx() const {
  return utmx_;
}
inline double TaskPoint::utmx() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoint.utmx)
  return _internal_utmx();
}
inline void TaskPoint::_internal_set_utmx(double value) {
  
  utmx_ = value;
}
inline void TaskPoint::set_utmx(double value) {
  _internal_set_utmx(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoint.utmx)
}

// double utmy = 4;
inline void TaskPoint::clear_utmy() {
  utmy_ = 0;
}
inline double TaskPoint::_internal_utmy() const {
  return utmy_;
}
inline double TaskPoint::utmy() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoint.utmy)
  return _internal_utmy();
}
inline void TaskPoint::_internal_set_utmy(double value) {
  
  utmy_ = value;
}
inline void TaskPoint::set_utmy(double value) {
  _internal_set_utmy(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoint.utmy)
}

// double heading = 5;
inline void TaskPoint::clear_heading() {
  heading_ = 0;
}
inline double TaskPoint::_internal_heading() const {
  return heading_;
}
inline double TaskPoint::heading() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoint.heading)
  return _internal_heading();
}
inline void TaskPoint::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void TaskPoint::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoint.heading)
}

// bool on_or_off = 6;
inline void TaskPoint::clear_on_or_off() {
  on_or_off_ = false;
}
inline bool TaskPoint::_internal_on_or_off() const {
  return on_or_off_;
}
inline bool TaskPoint::on_or_off() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoint.on_or_off)
  return _internal_on_or_off();
}
inline void TaskPoint::_internal_set_on_or_off(bool value) {
  
  on_or_off_ = value;
}
inline void TaskPoint::set_on_or_off(bool value) {
  _internal_set_on_or_off(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoint.on_or_off)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_routing_5fservice_2eproto
