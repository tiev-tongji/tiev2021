// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routing_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_routing_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_routing_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_routing_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_routing_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_routing_5fservice_2eproto;
namespace routing_service {
class RefRoad;
class RefRoadDefaultTypeInternal;
extern RefRoadDefaultTypeInternal _RefRoad_default_instance_;
class RefRoadPoint;
class RefRoadPointDefaultTypeInternal;
extern RefRoadPointDefaultTypeInternal _RefRoadPoint_default_instance_;
class TaskPoints;
class TaskPointsDefaultTypeInternal;
extern TaskPointsDefaultTypeInternal _TaskPoints_default_instance_;
class TaskPoints_TaskPoint;
class TaskPoints_TaskPointDefaultTypeInternal;
extern TaskPoints_TaskPointDefaultTypeInternal _TaskPoints_TaskPoint_default_instance_;
}  // namespace routing_service
PROTOBUF_NAMESPACE_OPEN
template<> ::routing_service::RefRoad* Arena::CreateMaybeMessage<::routing_service::RefRoad>(Arena*);
template<> ::routing_service::RefRoadPoint* Arena::CreateMaybeMessage<::routing_service::RefRoadPoint>(Arena*);
template<> ::routing_service::TaskPoints* Arena::CreateMaybeMessage<::routing_service::TaskPoints>(Arena*);
template<> ::routing_service::TaskPoints_TaskPoint* Arena::CreateMaybeMessage<::routing_service::TaskPoints_TaskPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace routing_service {

// ===================================================================

class TaskPoints_TaskPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.TaskPoints.TaskPoint) */ {
 public:
  inline TaskPoints_TaskPoint() : TaskPoints_TaskPoint(nullptr) {}
  virtual ~TaskPoints_TaskPoint();

  TaskPoints_TaskPoint(const TaskPoints_TaskPoint& from);
  TaskPoints_TaskPoint(TaskPoints_TaskPoint&& from) noexcept
    : TaskPoints_TaskPoint() {
    *this = ::std::move(from);
  }

  inline TaskPoints_TaskPoint& operator=(const TaskPoints_TaskPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskPoints_TaskPoint& operator=(TaskPoints_TaskPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskPoints_TaskPoint& default_instance();

  static inline const TaskPoints_TaskPoint* internal_default_instance() {
    return reinterpret_cast<const TaskPoints_TaskPoint*>(
               &_TaskPoints_TaskPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskPoints_TaskPoint& a, TaskPoints_TaskPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskPoints_TaskPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskPoints_TaskPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskPoints_TaskPoint* New() const final {
    return CreateMaybeMessage<TaskPoints_TaskPoint>(nullptr);
  }

  TaskPoints_TaskPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskPoints_TaskPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskPoints_TaskPoint& from);
  void MergeFrom(const TaskPoints_TaskPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskPoints_TaskPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.TaskPoints.TaskPoint";
  }
  protected:
  explicit TaskPoints_TaskPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonFieldNumber = 1,
    kLatFieldNumber = 2,
  };
  // double lon = 1;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double lat = 2;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.TaskPoints.TaskPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lon_;
  double lat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskPoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.TaskPoints) */ {
 public:
  inline TaskPoints() : TaskPoints(nullptr) {}
  virtual ~TaskPoints();

  TaskPoints(const TaskPoints& from);
  TaskPoints(TaskPoints&& from) noexcept
    : TaskPoints() {
    *this = ::std::move(from);
  }

  inline TaskPoints& operator=(const TaskPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskPoints& operator=(TaskPoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskPoints& default_instance();

  static inline const TaskPoints* internal_default_instance() {
    return reinterpret_cast<const TaskPoints*>(
               &_TaskPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskPoints& a, TaskPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskPoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskPoints* New() const final {
    return CreateMaybeMessage<TaskPoints>(nullptr);
  }

  TaskPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskPoints& from);
  void MergeFrom(const TaskPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.TaskPoints";
  }
  protected:
  explicit TaskPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TaskPoints_TaskPoint TaskPoint;

  // accessors -------------------------------------------------------

  enum : int {
    kTaskPointFieldNumber = 2,
    kBlockedFieldNumber = 1,
  };
  // repeated .routing_service.TaskPoints.TaskPoint task_point = 2;
  int task_point_size() const;
  private:
  int _internal_task_point_size() const;
  public:
  void clear_task_point();
  ::routing_service::TaskPoints_TaskPoint* mutable_task_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::TaskPoints_TaskPoint >*
      mutable_task_point();
  private:
  const ::routing_service::TaskPoints_TaskPoint& _internal_task_point(int index) const;
  ::routing_service::TaskPoints_TaskPoint* _internal_add_task_point();
  public:
  const ::routing_service::TaskPoints_TaskPoint& task_point(int index) const;
  ::routing_service::TaskPoints_TaskPoint* add_task_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::TaskPoints_TaskPoint >&
      task_point() const;

  // bool blocked = 1;
  void clear_blocked();
  bool blocked() const;
  void set_blocked(bool value);
  private:
  bool _internal_blocked() const;
  void _internal_set_blocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.TaskPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::TaskPoints_TaskPoint > task_point_;
  bool blocked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RefRoadPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.RefRoadPoint) */ {
 public:
  inline RefRoadPoint() : RefRoadPoint(nullptr) {}
  virtual ~RefRoadPoint();

  RefRoadPoint(const RefRoadPoint& from);
  RefRoadPoint(RefRoadPoint&& from) noexcept
    : RefRoadPoint() {
    *this = ::std::move(from);
  }

  inline RefRoadPoint& operator=(const RefRoadPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefRoadPoint& operator=(RefRoadPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefRoadPoint& default_instance();

  static inline const RefRoadPoint* internal_default_instance() {
    return reinterpret_cast<const RefRoadPoint*>(
               &_RefRoadPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RefRoadPoint& a, RefRoadPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RefRoadPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefRoadPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefRoadPoint* New() const final {
    return CreateMaybeMessage<RefRoadPoint>(nullptr);
  }

  RefRoadPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefRoadPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefRoadPoint& from);
  void MergeFrom(const RefRoadPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefRoadPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.RefRoadPoint";
  }
  protected:
  explicit RefRoadPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLonFieldNumber = 2,
    kLatFieldNumber = 3,
    kUtmxFieldNumber = 4,
    kUtmyFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kCurvFieldNumber = 7,
    kModeFieldNumber = 8,
    kSpeedModeFieldNumber = 9,
    kEventModeFieldNumber = 10,
    kOppositeSideModeFieldNumber = 11,
    kLaneNumFieldNumber = 12,
    kLaneSeqFieldNumber = 13,
    kLaneWidthFieldNumber = 14,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string lon = 2;
  void clear_lon();
  const std::string& lon() const;
  void set_lon(const std::string& value);
  void set_lon(std::string&& value);
  void set_lon(const char* value);
  void set_lon(const char* value, size_t size);
  std::string* mutable_lon();
  std::string* release_lon();
  void set_allocated_lon(std::string* lon);
  private:
  const std::string& _internal_lon() const;
  void _internal_set_lon(const std::string& value);
  std::string* _internal_mutable_lon();
  public:

  // string lat = 3;
  void clear_lat();
  const std::string& lat() const;
  void set_lat(const std::string& value);
  void set_lat(std::string&& value);
  void set_lat(const char* value);
  void set_lat(const char* value, size_t size);
  std::string* mutable_lat();
  std::string* release_lat();
  void set_allocated_lat(std::string* lat);
  private:
  const std::string& _internal_lat() const;
  void _internal_set_lat(const std::string& value);
  std::string* _internal_mutable_lat();
  public:

  // string utmx = 4;
  void clear_utmx();
  const std::string& utmx() const;
  void set_utmx(const std::string& value);
  void set_utmx(std::string&& value);
  void set_utmx(const char* value);
  void set_utmx(const char* value, size_t size);
  std::string* mutable_utmx();
  std::string* release_utmx();
  void set_allocated_utmx(std::string* utmx);
  private:
  const std::string& _internal_utmx() const;
  void _internal_set_utmx(const std::string& value);
  std::string* _internal_mutable_utmx();
  public:

  // string utmy = 5;
  void clear_utmy();
  const std::string& utmy() const;
  void set_utmy(const std::string& value);
  void set_utmy(std::string&& value);
  void set_utmy(const char* value);
  void set_utmy(const char* value, size_t size);
  std::string* mutable_utmy();
  std::string* release_utmy();
  void set_allocated_utmy(std::string* utmy);
  private:
  const std::string& _internal_utmy() const;
  void _internal_set_utmy(const std::string& value);
  std::string* _internal_mutable_utmy();
  public:

  // string heading = 6;
  void clear_heading();
  const std::string& heading() const;
  void set_heading(const std::string& value);
  void set_heading(std::string&& value);
  void set_heading(const char* value);
  void set_heading(const char* value, size_t size);
  std::string* mutable_heading();
  std::string* release_heading();
  void set_allocated_heading(std::string* heading);
  private:
  const std::string& _internal_heading() const;
  void _internal_set_heading(const std::string& value);
  std::string* _internal_mutable_heading();
  public:

  // string curv = 7;
  void clear_curv();
  const std::string& curv() const;
  void set_curv(const std::string& value);
  void set_curv(std::string&& value);
  void set_curv(const char* value);
  void set_curv(const char* value, size_t size);
  std::string* mutable_curv();
  std::string* release_curv();
  void set_allocated_curv(std::string* curv);
  private:
  const std::string& _internal_curv() const;
  void _internal_set_curv(const std::string& value);
  std::string* _internal_mutable_curv();
  public:

  // string mode = 8;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // string speed_mode = 9;
  void clear_speed_mode();
  const std::string& speed_mode() const;
  void set_speed_mode(const std::string& value);
  void set_speed_mode(std::string&& value);
  void set_speed_mode(const char* value);
  void set_speed_mode(const char* value, size_t size);
  std::string* mutable_speed_mode();
  std::string* release_speed_mode();
  void set_allocated_speed_mode(std::string* speed_mode);
  private:
  const std::string& _internal_speed_mode() const;
  void _internal_set_speed_mode(const std::string& value);
  std::string* _internal_mutable_speed_mode();
  public:

  // string event_mode = 10;
  void clear_event_mode();
  const std::string& event_mode() const;
  void set_event_mode(const std::string& value);
  void set_event_mode(std::string&& value);
  void set_event_mode(const char* value);
  void set_event_mode(const char* value, size_t size);
  std::string* mutable_event_mode();
  std::string* release_event_mode();
  void set_allocated_event_mode(std::string* event_mode);
  private:
  const std::string& _internal_event_mode() const;
  void _internal_set_event_mode(const std::string& value);
  std::string* _internal_mutable_event_mode();
  public:

  // string opposite_side_mode = 11;
  void clear_opposite_side_mode();
  const std::string& opposite_side_mode() const;
  void set_opposite_side_mode(const std::string& value);
  void set_opposite_side_mode(std::string&& value);
  void set_opposite_side_mode(const char* value);
  void set_opposite_side_mode(const char* value, size_t size);
  std::string* mutable_opposite_side_mode();
  std::string* release_opposite_side_mode();
  void set_allocated_opposite_side_mode(std::string* opposite_side_mode);
  private:
  const std::string& _internal_opposite_side_mode() const;
  void _internal_set_opposite_side_mode(const std::string& value);
  std::string* _internal_mutable_opposite_side_mode();
  public:

  // string lane_num = 12;
  void clear_lane_num();
  const std::string& lane_num() const;
  void set_lane_num(const std::string& value);
  void set_lane_num(std::string&& value);
  void set_lane_num(const char* value);
  void set_lane_num(const char* value, size_t size);
  std::string* mutable_lane_num();
  std::string* release_lane_num();
  void set_allocated_lane_num(std::string* lane_num);
  private:
  const std::string& _internal_lane_num() const;
  void _internal_set_lane_num(const std::string& value);
  std::string* _internal_mutable_lane_num();
  public:

  // string lane_seq = 13;
  void clear_lane_seq();
  const std::string& lane_seq() const;
  void set_lane_seq(const std::string& value);
  void set_lane_seq(std::string&& value);
  void set_lane_seq(const char* value);
  void set_lane_seq(const char* value, size_t size);
  std::string* mutable_lane_seq();
  std::string* release_lane_seq();
  void set_allocated_lane_seq(std::string* lane_seq);
  private:
  const std::string& _internal_lane_seq() const;
  void _internal_set_lane_seq(const std::string& value);
  std::string* _internal_mutable_lane_seq();
  public:

  // string lane_width = 14;
  void clear_lane_width();
  const std::string& lane_width() const;
  void set_lane_width(const std::string& value);
  void set_lane_width(std::string&& value);
  void set_lane_width(const char* value);
  void set_lane_width(const char* value, size_t size);
  std::string* mutable_lane_width();
  std::string* release_lane_width();
  void set_allocated_lane_width(std::string* lane_width);
  private:
  const std::string& _internal_lane_width() const;
  void _internal_set_lane_width(const std::string& value);
  std::string* _internal_mutable_lane_width();
  public:

  // @@protoc_insertion_point(class_scope:routing_service.RefRoadPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utmx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utmy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heading_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr curv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speed_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opposite_side_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_seq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RefRoad PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routing_service.RefRoad) */ {
 public:
  inline RefRoad() : RefRoad(nullptr) {}
  virtual ~RefRoad();

  RefRoad(const RefRoad& from);
  RefRoad(RefRoad&& from) noexcept
    : RefRoad() {
    *this = ::std::move(from);
  }

  inline RefRoad& operator=(const RefRoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefRoad& operator=(RefRoad&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefRoad& default_instance();

  static inline const RefRoad* internal_default_instance() {
    return reinterpret_cast<const RefRoad*>(
               &_RefRoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RefRoad& a, RefRoad& b) {
    a.Swap(&b);
  }
  inline void Swap(RefRoad* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefRoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefRoad* New() const final {
    return CreateMaybeMessage<RefRoad>(nullptr);
  }

  RefRoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefRoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefRoad& from);
  void MergeFrom(const RefRoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefRoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routing_service.RefRoad";
  }
  protected:
  explicit RefRoad(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routing_5fservice_2eproto);
    return ::descriptor_table_routing_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 2,
    kTimeCostFieldNumber = 1,
  };
  // repeated .routing_service.RefRoadPoint point = 2;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::routing_service::RefRoadPoint* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint >*
      mutable_point();
  private:
  const ::routing_service::RefRoadPoint& _internal_point(int index) const;
  ::routing_service::RefRoadPoint* _internal_add_point();
  public:
  const ::routing_service::RefRoadPoint& point(int index) const;
  ::routing_service::RefRoadPoint* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint >&
      point() const;

  // int32 time_cost = 1;
  void clear_time_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 time_cost() const;
  void set_time_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_cost() const;
  void _internal_set_time_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:routing_service.RefRoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint > point_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routing_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskPoints_TaskPoint

// double lon = 1;
inline void TaskPoints_TaskPoint::clear_lon() {
  lon_ = 0;
}
inline double TaskPoints_TaskPoint::_internal_lon() const {
  return lon_;
}
inline double TaskPoints_TaskPoint::lon() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoints.TaskPoint.lon)
  return _internal_lon();
}
inline void TaskPoints_TaskPoint::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void TaskPoints_TaskPoint::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoints.TaskPoint.lon)
}

// double lat = 2;
inline void TaskPoints_TaskPoint::clear_lat() {
  lat_ = 0;
}
inline double TaskPoints_TaskPoint::_internal_lat() const {
  return lat_;
}
inline double TaskPoints_TaskPoint::lat() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoints.TaskPoint.lat)
  return _internal_lat();
}
inline void TaskPoints_TaskPoint::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void TaskPoints_TaskPoint::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoints.TaskPoint.lat)
}

// -------------------------------------------------------------------

// TaskPoints

// bool blocked = 1;
inline void TaskPoints::clear_blocked() {
  blocked_ = false;
}
inline bool TaskPoints::_internal_blocked() const {
  return blocked_;
}
inline bool TaskPoints::blocked() const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoints.blocked)
  return _internal_blocked();
}
inline void TaskPoints::_internal_set_blocked(bool value) {
  
  blocked_ = value;
}
inline void TaskPoints::set_blocked(bool value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:routing_service.TaskPoints.blocked)
}

// repeated .routing_service.TaskPoints.TaskPoint task_point = 2;
inline int TaskPoints::_internal_task_point_size() const {
  return task_point_.size();
}
inline int TaskPoints::task_point_size() const {
  return _internal_task_point_size();
}
inline void TaskPoints::clear_task_point() {
  task_point_.Clear();
}
inline ::routing_service::TaskPoints_TaskPoint* TaskPoints::mutable_task_point(int index) {
  // @@protoc_insertion_point(field_mutable:routing_service.TaskPoints.task_point)
  return task_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::TaskPoints_TaskPoint >*
TaskPoints::mutable_task_point() {
  // @@protoc_insertion_point(field_mutable_list:routing_service.TaskPoints.task_point)
  return &task_point_;
}
inline const ::routing_service::TaskPoints_TaskPoint& TaskPoints::_internal_task_point(int index) const {
  return task_point_.Get(index);
}
inline const ::routing_service::TaskPoints_TaskPoint& TaskPoints::task_point(int index) const {
  // @@protoc_insertion_point(field_get:routing_service.TaskPoints.task_point)
  return _internal_task_point(index);
}
inline ::routing_service::TaskPoints_TaskPoint* TaskPoints::_internal_add_task_point() {
  return task_point_.Add();
}
inline ::routing_service::TaskPoints_TaskPoint* TaskPoints::add_task_point() {
  // @@protoc_insertion_point(field_add:routing_service.TaskPoints.task_point)
  return _internal_add_task_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::TaskPoints_TaskPoint >&
TaskPoints::task_point() const {
  // @@protoc_insertion_point(field_list:routing_service.TaskPoints.task_point)
  return task_point_;
}

// -------------------------------------------------------------------

// RefRoadPoint

// string id = 1;
inline void RefRoadPoint::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::id() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.id)
  return _internal_id();
}
inline void RefRoadPoint::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.id)
}
inline std::string* RefRoadPoint::mutable_id() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.id)
  return _internal_mutable_id();
}
inline const std::string& RefRoadPoint::_internal_id() const {
  return id_.Get();
}
inline void RefRoadPoint::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.id)
}
inline void RefRoadPoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.id)
}
inline void RefRoadPoint::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.id)
}
inline std::string* RefRoadPoint::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_id() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.id)
}

// string lon = 2;
inline void RefRoadPoint::clear_lon() {
  lon_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::lon() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lon)
  return _internal_lon();
}
inline void RefRoadPoint::set_lon(const std::string& value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lon)
}
inline std::string* RefRoadPoint::mutable_lon() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.lon)
  return _internal_mutable_lon();
}
inline const std::string& RefRoadPoint::_internal_lon() const {
  return lon_.Get();
}
inline void RefRoadPoint::_internal_set_lon(const std::string& value) {
  
  lon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_lon(std::string&& value) {
  
  lon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.lon)
}
inline void RefRoadPoint::set_lon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.lon)
}
inline void RefRoadPoint::set_lon(const char* value,
    size_t size) {
  
  lon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.lon)
}
inline std::string* RefRoadPoint::_internal_mutable_lon() {
  
  return lon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_lon() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.lon)
  return lon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_lon(std::string* lon) {
  if (lon != nullptr) {
    
  } else {
    
  }
  lon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.lon)
}

// string lat = 3;
inline void RefRoadPoint::clear_lat() {
  lat_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::lat() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lat)
  return _internal_lat();
}
inline void RefRoadPoint::set_lat(const std::string& value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lat)
}
inline std::string* RefRoadPoint::mutable_lat() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.lat)
  return _internal_mutable_lat();
}
inline const std::string& RefRoadPoint::_internal_lat() const {
  return lat_.Get();
}
inline void RefRoadPoint::_internal_set_lat(const std::string& value) {
  
  lat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_lat(std::string&& value) {
  
  lat_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.lat)
}
inline void RefRoadPoint::set_lat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.lat)
}
inline void RefRoadPoint::set_lat(const char* value,
    size_t size) {
  
  lat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.lat)
}
inline std::string* RefRoadPoint::_internal_mutable_lat() {
  
  return lat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_lat() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.lat)
  return lat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_lat(std::string* lat) {
  if (lat != nullptr) {
    
  } else {
    
  }
  lat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lat,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.lat)
}

// string utmx = 4;
inline void RefRoadPoint::clear_utmx() {
  utmx_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::utmx() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.utmx)
  return _internal_utmx();
}
inline void RefRoadPoint::set_utmx(const std::string& value) {
  _internal_set_utmx(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.utmx)
}
inline std::string* RefRoadPoint::mutable_utmx() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.utmx)
  return _internal_mutable_utmx();
}
inline const std::string& RefRoadPoint::_internal_utmx() const {
  return utmx_.Get();
}
inline void RefRoadPoint::_internal_set_utmx(const std::string& value) {
  
  utmx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_utmx(std::string&& value) {
  
  utmx_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.utmx)
}
inline void RefRoadPoint::set_utmx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  utmx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.utmx)
}
inline void RefRoadPoint::set_utmx(const char* value,
    size_t size) {
  
  utmx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.utmx)
}
inline std::string* RefRoadPoint::_internal_mutable_utmx() {
  
  return utmx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_utmx() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.utmx)
  return utmx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_utmx(std::string* utmx) {
  if (utmx != nullptr) {
    
  } else {
    
  }
  utmx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), utmx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.utmx)
}

// string utmy = 5;
inline void RefRoadPoint::clear_utmy() {
  utmy_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::utmy() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.utmy)
  return _internal_utmy();
}
inline void RefRoadPoint::set_utmy(const std::string& value) {
  _internal_set_utmy(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.utmy)
}
inline std::string* RefRoadPoint::mutable_utmy() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.utmy)
  return _internal_mutable_utmy();
}
inline const std::string& RefRoadPoint::_internal_utmy() const {
  return utmy_.Get();
}
inline void RefRoadPoint::_internal_set_utmy(const std::string& value) {
  
  utmy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_utmy(std::string&& value) {
  
  utmy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.utmy)
}
inline void RefRoadPoint::set_utmy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  utmy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.utmy)
}
inline void RefRoadPoint::set_utmy(const char* value,
    size_t size) {
  
  utmy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.utmy)
}
inline std::string* RefRoadPoint::_internal_mutable_utmy() {
  
  return utmy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_utmy() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.utmy)
  return utmy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_utmy(std::string* utmy) {
  if (utmy != nullptr) {
    
  } else {
    
  }
  utmy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), utmy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.utmy)
}

// string heading = 6;
inline void RefRoadPoint::clear_heading() {
  heading_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::heading() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.heading)
  return _internal_heading();
}
inline void RefRoadPoint::set_heading(const std::string& value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.heading)
}
inline std::string* RefRoadPoint::mutable_heading() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.heading)
  return _internal_mutable_heading();
}
inline const std::string& RefRoadPoint::_internal_heading() const {
  return heading_.Get();
}
inline void RefRoadPoint::_internal_set_heading(const std::string& value) {
  
  heading_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_heading(std::string&& value) {
  
  heading_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.heading)
}
inline void RefRoadPoint::set_heading(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  heading_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.heading)
}
inline void RefRoadPoint::set_heading(const char* value,
    size_t size) {
  
  heading_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.heading)
}
inline std::string* RefRoadPoint::_internal_mutable_heading() {
  
  return heading_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_heading() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.heading)
  return heading_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_heading(std::string* heading) {
  if (heading != nullptr) {
    
  } else {
    
  }
  heading_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heading,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.heading)
}

// string curv = 7;
inline void RefRoadPoint::clear_curv() {
  curv_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::curv() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.curv)
  return _internal_curv();
}
inline void RefRoadPoint::set_curv(const std::string& value) {
  _internal_set_curv(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.curv)
}
inline std::string* RefRoadPoint::mutable_curv() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.curv)
  return _internal_mutable_curv();
}
inline const std::string& RefRoadPoint::_internal_curv() const {
  return curv_.Get();
}
inline void RefRoadPoint::_internal_set_curv(const std::string& value) {
  
  curv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_curv(std::string&& value) {
  
  curv_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.curv)
}
inline void RefRoadPoint::set_curv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  curv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.curv)
}
inline void RefRoadPoint::set_curv(const char* value,
    size_t size) {
  
  curv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.curv)
}
inline std::string* RefRoadPoint::_internal_mutable_curv() {
  
  return curv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_curv() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.curv)
  return curv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_curv(std::string* curv) {
  if (curv != nullptr) {
    
  } else {
    
  }
  curv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), curv,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.curv)
}

// string mode = 8;
inline void RefRoadPoint::clear_mode() {
  mode_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::mode() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.mode)
  return _internal_mode();
}
inline void RefRoadPoint::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.mode)
}
inline std::string* RefRoadPoint::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.mode)
  return _internal_mutable_mode();
}
inline const std::string& RefRoadPoint::_internal_mode() const {
  return mode_.Get();
}
inline void RefRoadPoint::_internal_set_mode(const std::string& value) {
  
  mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_mode(std::string&& value) {
  
  mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.mode)
}
inline void RefRoadPoint::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.mode)
}
inline void RefRoadPoint::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.mode)
}
inline std::string* RefRoadPoint::_internal_mutable_mode() {
  
  return mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_mode() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.mode)
}

// string speed_mode = 9;
inline void RefRoadPoint::clear_speed_mode() {
  speed_mode_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::speed_mode() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.speed_mode)
  return _internal_speed_mode();
}
inline void RefRoadPoint::set_speed_mode(const std::string& value) {
  _internal_set_speed_mode(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.speed_mode)
}
inline std::string* RefRoadPoint::mutable_speed_mode() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.speed_mode)
  return _internal_mutable_speed_mode();
}
inline const std::string& RefRoadPoint::_internal_speed_mode() const {
  return speed_mode_.Get();
}
inline void RefRoadPoint::_internal_set_speed_mode(const std::string& value) {
  
  speed_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_speed_mode(std::string&& value) {
  
  speed_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.speed_mode)
}
inline void RefRoadPoint::set_speed_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  speed_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.speed_mode)
}
inline void RefRoadPoint::set_speed_mode(const char* value,
    size_t size) {
  
  speed_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.speed_mode)
}
inline std::string* RefRoadPoint::_internal_mutable_speed_mode() {
  
  return speed_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_speed_mode() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.speed_mode)
  return speed_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_speed_mode(std::string* speed_mode) {
  if (speed_mode != nullptr) {
    
  } else {
    
  }
  speed_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), speed_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.speed_mode)
}

// string event_mode = 10;
inline void RefRoadPoint::clear_event_mode() {
  event_mode_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::event_mode() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.event_mode)
  return _internal_event_mode();
}
inline void RefRoadPoint::set_event_mode(const std::string& value) {
  _internal_set_event_mode(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.event_mode)
}
inline std::string* RefRoadPoint::mutable_event_mode() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.event_mode)
  return _internal_mutable_event_mode();
}
inline const std::string& RefRoadPoint::_internal_event_mode() const {
  return event_mode_.Get();
}
inline void RefRoadPoint::_internal_set_event_mode(const std::string& value) {
  
  event_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_event_mode(std::string&& value) {
  
  event_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.event_mode)
}
inline void RefRoadPoint::set_event_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.event_mode)
}
inline void RefRoadPoint::set_event_mode(const char* value,
    size_t size) {
  
  event_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.event_mode)
}
inline std::string* RefRoadPoint::_internal_mutable_event_mode() {
  
  return event_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_event_mode() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.event_mode)
  return event_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_event_mode(std::string* event_mode) {
  if (event_mode != nullptr) {
    
  } else {
    
  }
  event_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.event_mode)
}

// string opposite_side_mode = 11;
inline void RefRoadPoint::clear_opposite_side_mode() {
  opposite_side_mode_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::opposite_side_mode() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.opposite_side_mode)
  return _internal_opposite_side_mode();
}
inline void RefRoadPoint::set_opposite_side_mode(const std::string& value) {
  _internal_set_opposite_side_mode(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.opposite_side_mode)
}
inline std::string* RefRoadPoint::mutable_opposite_side_mode() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.opposite_side_mode)
  return _internal_mutable_opposite_side_mode();
}
inline const std::string& RefRoadPoint::_internal_opposite_side_mode() const {
  return opposite_side_mode_.Get();
}
inline void RefRoadPoint::_internal_set_opposite_side_mode(const std::string& value) {
  
  opposite_side_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_opposite_side_mode(std::string&& value) {
  
  opposite_side_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.opposite_side_mode)
}
inline void RefRoadPoint::set_opposite_side_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opposite_side_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.opposite_side_mode)
}
inline void RefRoadPoint::set_opposite_side_mode(const char* value,
    size_t size) {
  
  opposite_side_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.opposite_side_mode)
}
inline std::string* RefRoadPoint::_internal_mutable_opposite_side_mode() {
  
  return opposite_side_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_opposite_side_mode() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.opposite_side_mode)
  return opposite_side_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_opposite_side_mode(std::string* opposite_side_mode) {
  if (opposite_side_mode != nullptr) {
    
  } else {
    
  }
  opposite_side_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opposite_side_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.opposite_side_mode)
}

// string lane_num = 12;
inline void RefRoadPoint::clear_lane_num() {
  lane_num_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::lane_num() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lane_num)
  return _internal_lane_num();
}
inline void RefRoadPoint::set_lane_num(const std::string& value) {
  _internal_set_lane_num(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lane_num)
}
inline std::string* RefRoadPoint::mutable_lane_num() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.lane_num)
  return _internal_mutable_lane_num();
}
inline const std::string& RefRoadPoint::_internal_lane_num() const {
  return lane_num_.Get();
}
inline void RefRoadPoint::_internal_set_lane_num(const std::string& value) {
  
  lane_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_lane_num(std::string&& value) {
  
  lane_num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.lane_num)
}
inline void RefRoadPoint::set_lane_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lane_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.lane_num)
}
inline void RefRoadPoint::set_lane_num(const char* value,
    size_t size) {
  
  lane_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.lane_num)
}
inline std::string* RefRoadPoint::_internal_mutable_lane_num() {
  
  return lane_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_lane_num() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.lane_num)
  return lane_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_lane_num(std::string* lane_num) {
  if (lane_num != nullptr) {
    
  } else {
    
  }
  lane_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lane_num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.lane_num)
}

// string lane_seq = 13;
inline void RefRoadPoint::clear_lane_seq() {
  lane_seq_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::lane_seq() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lane_seq)
  return _internal_lane_seq();
}
inline void RefRoadPoint::set_lane_seq(const std::string& value) {
  _internal_set_lane_seq(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lane_seq)
}
inline std::string* RefRoadPoint::mutable_lane_seq() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.lane_seq)
  return _internal_mutable_lane_seq();
}
inline const std::string& RefRoadPoint::_internal_lane_seq() const {
  return lane_seq_.Get();
}
inline void RefRoadPoint::_internal_set_lane_seq(const std::string& value) {
  
  lane_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_lane_seq(std::string&& value) {
  
  lane_seq_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.lane_seq)
}
inline void RefRoadPoint::set_lane_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lane_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.lane_seq)
}
inline void RefRoadPoint::set_lane_seq(const char* value,
    size_t size) {
  
  lane_seq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.lane_seq)
}
inline std::string* RefRoadPoint::_internal_mutable_lane_seq() {
  
  return lane_seq_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_lane_seq() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.lane_seq)
  return lane_seq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_lane_seq(std::string* lane_seq) {
  if (lane_seq != nullptr) {
    
  } else {
    
  }
  lane_seq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lane_seq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.lane_seq)
}

// string lane_width = 14;
inline void RefRoadPoint::clear_lane_width() {
  lane_width_.ClearToEmpty();
}
inline const std::string& RefRoadPoint::lane_width() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoadPoint.lane_width)
  return _internal_lane_width();
}
inline void RefRoadPoint::set_lane_width(const std::string& value) {
  _internal_set_lane_width(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoadPoint.lane_width)
}
inline std::string* RefRoadPoint::mutable_lane_width() {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoadPoint.lane_width)
  return _internal_mutable_lane_width();
}
inline const std::string& RefRoadPoint::_internal_lane_width() const {
  return lane_width_.Get();
}
inline void RefRoadPoint::_internal_set_lane_width(const std::string& value) {
  
  lane_width_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RefRoadPoint::set_lane_width(std::string&& value) {
  
  lane_width_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:routing_service.RefRoadPoint.lane_width)
}
inline void RefRoadPoint::set_lane_width(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lane_width_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:routing_service.RefRoadPoint.lane_width)
}
inline void RefRoadPoint::set_lane_width(const char* value,
    size_t size) {
  
  lane_width_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:routing_service.RefRoadPoint.lane_width)
}
inline std::string* RefRoadPoint::_internal_mutable_lane_width() {
  
  return lane_width_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RefRoadPoint::release_lane_width() {
  // @@protoc_insertion_point(field_release:routing_service.RefRoadPoint.lane_width)
  return lane_width_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefRoadPoint::set_allocated_lane_width(std::string* lane_width) {
  if (lane_width != nullptr) {
    
  } else {
    
  }
  lane_width_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lane_width,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:routing_service.RefRoadPoint.lane_width)
}

// -------------------------------------------------------------------

// RefRoad

// int32 time_cost = 1;
inline void RefRoad::clear_time_cost() {
  time_cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoad::_internal_time_cost() const {
  return time_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RefRoad::time_cost() const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoad.time_cost)
  return _internal_time_cost();
}
inline void RefRoad::_internal_set_time_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_cost_ = value;
}
inline void RefRoad::set_time_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_cost(value);
  // @@protoc_insertion_point(field_set:routing_service.RefRoad.time_cost)
}

// repeated .routing_service.RefRoadPoint point = 2;
inline int RefRoad::_internal_point_size() const {
  return point_.size();
}
inline int RefRoad::point_size() const {
  return _internal_point_size();
}
inline void RefRoad::clear_point() {
  point_.Clear();
}
inline ::routing_service::RefRoadPoint* RefRoad::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:routing_service.RefRoad.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint >*
RefRoad::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:routing_service.RefRoad.point)
  return &point_;
}
inline const ::routing_service::RefRoadPoint& RefRoad::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::routing_service::RefRoadPoint& RefRoad::point(int index) const {
  // @@protoc_insertion_point(field_get:routing_service.RefRoad.point)
  return _internal_point(index);
}
inline ::routing_service::RefRoadPoint* RefRoad::_internal_add_point() {
  return point_.Add();
}
inline ::routing_service::RefRoadPoint* RefRoad::add_point() {
  // @@protoc_insertion_point(field_add:routing_service.RefRoad.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routing_service::RefRoadPoint >&
RefRoad::point() const {
  // @@protoc_insertion_point(field_list:routing_service.RefRoad.point)
  return point_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_routing_5fservice_2eproto
